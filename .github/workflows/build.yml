name: Build QEMU WebAssembly (Advanced)
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      QEMU_VERSION: "8.2.0"
      EMSDK_VERSION: "latest"
      ARTIFACT_RETENTION_DAYS: 7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v3
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}
          restore-keys: |
            emsdk-${{ runner.os }}-

      - name: Install Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
        working-directory: .

      - name: Cache QEMU Source
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.QEMU_VERSION }}
          key: qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}
          restore-keys: |
            qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}

      - name: Download QEMU Source
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          wget https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
          echo "QEMU source downloaded and extracted."

      - name: Configure QEMU
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          ./configure --target-list=${{ matrix.target }} --cc=emcc --cxx=em++ \
            --extra-cflags="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1" \
            --extra-ldflags="-s USE_SDL=2 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] -s ALLOW_MEMORY_GROWTH=1"
          echo "QEMU configured for target: ${{ matrix.target }}"
        working-directory: .

      - name: Build QEMU
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          emmake make -j2  # Conservative job limit
          echo "QEMU build completed for target: ${{ matrix.target }}"
        working-directory: .

      - name: Test QEMU Binary
        run: |
          cd qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}
          if [ ! -f "qemu-system-${{ matrix.target }}" ]; then
            echo "Error: QEMU binary not found!"
            exit 1
          fi
          echo "Testing QEMU binary for target: ${{ matrix.target }}"
          node qemu-system-${{ matrix.target }} --version || echo "Test failed, but continuing..."
        working-directory: .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-system-${{ matrix.target }}.*
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        run: |
          echo "Cleaning up build files..."
          rm -rf qemu-${{ env.QEMU_VERSION }}
          rm -rf emsdk
          echo "Cleanup completed."

      - name: Notify Build Status
        if: always()
        run: |
          echo "Build completed for ${{ matrix.target }} with status: ${{ job.status }}"
