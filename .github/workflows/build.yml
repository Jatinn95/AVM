name: Build QEMU WebAssembly (Advanced)
on: [push]

jobs:
  build-qemu-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build git meson
          echo "Installed build dependencies successfully."

      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
          which emcc || { echo "Error: emcc not found after installation"; exit 1; }
        working-directory: .
        timeout-minutes: 10

      - name: Download QEMU Source (Primary Version)
        run: |
          QEMU_VERSION="9.2.0"
          wget --timeout=300 --tries=3 https://download.qemu.org/qemu-${QEMU_VERSION}.tar.xz || {
            echo "Error: Failed to download qemu-${QEMU_VERSION}.tar.xz."
            exit 1
          }
          tar -xf qemu-${QEMU_VERSION}.tar.xz
          mv qemu-${QEMU_VERSION} qemu
          echo "Downloaded and extracted QEMU ${QEMU_VERSION}."
        timeout-minutes: 10

      - name: Patch QEMU Configure Script
        run: |
          cd qemu
          sed -i '/Unrecognized host OS/ { s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux for Emscripten build"\nhost_os=linux|; }' configure
          echo "Patched configure script to force host_os=linux."
        working-directory: .

      - name: Create Meson Cross File for Emscripten
        run: |
          mkdir -p qemu
          cat << EOF > qemu/emscripten_cross.txt
          [binaries]
          c = 'emcc'
          cpp = 'em++'
          ar = 'emar'
          ld = 'emcc'
          strip = 'emstrip'
          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm'
          cpu = 'wasm32'
          endian = 'little'
          [properties]
          needs_exe_wrapper = true
          EOF
          echo "Created Meson cross file for Emscripten."
        working-directory: .

      - name: Configure QEMU for WebAssembly
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          echo "PATH after sourcing emsdk_env.sh: $PATH"
          which emcc || { echo "Error: emcc not found in PATH"; exit 1; }
          emcc --version || { echo "Error: emcc not working"; exit 1; }
          cd qemu
          ./configure \
            --cross-prefix=em \
            --cc=emcc \
            --cxx=em++ \
            --target-list=i386-softmmu \
            --enable-tcg-interpreter \
            --disable-xen \
            --enable-sdl \
            --audio-drv-list= || {
            echo "Initial configuration failed! Check logs above for details."
            exit 1
          }
          meson setup build \
            --cross-file emscripten_cross.txt \
            --buildtype=release \
            --prefix="$(pwd)/build/i386-softmmu" || {
            echo "Meson configuration failed! Check logs above for details."
            exit 1
          }
          echo "Configuration completed successfully."
        working-directory: .

      - name: Build QEMU (Verbose Mode)
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          echo "PATH after sourcing emsdk_env.sh: $PATH"
          which emcc || { echo "Error: emcc not found in PATH"; exit 1; }
          cd qemu
          export CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1"
          export LDFLAGS="-s USE_SDL=2 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -o build/i386-softmmu/qemu-system-i386.js"
          emmake ninja -C build -j2 -v || {
            echo "Build failed! Check verbose logs above for details."
            ls -la build || echo "Directory build not found."
            exit 1
          }
          echo "Build completed, checking build directory:"
          ls -la build/i386-softmmu || echo "Warning: build/i386-softmmu directory missing after build."
        working-directory: .
        timeout-minutes: 25

      - name: Fallback to Older QEMU Version (6.0.0)
        if: failure()
        run: |
          echo "Attempting fallback build with QEMU 6.0.0..."
          rm -rf qemu
          QEMU_VERSION="6.0.0"
          wget --timeout=300 --tries=3 https://download.qemu.org/qemu-${QEMU_VERSION}.tar.xz || {
            echo "Error: Failed to download qemu-${QEMU_VERSION}.tar.xz."
            exit 1
          }
          tar -xf qemu-${QEMU_VERSION}.tar.xz
          mv qemu-${QEMU_VERSION} qemu
          cd qemu
          sed -i '/Unrecognized host OS/ { s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux for Emscripten build"\nhost_os=linux|; }' configure
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          echo "PATH after sourcing emsdk_env.sh: $PATH"
          which emcc || { echo "Error: emcc not found in PATH"; exit 1; }
          emcc --version || { echo "Error: emcc not working"; exit 1; }
          ./configure \
            --cross-prefix=em \
            --cc=emcc \
            --cxx=em++ \
            --target-list=i386-softmmu \
            --enable-tcg-interpreter \
            --disable-xen \
            --enable-sdl \
            --audio-drv-list= || {
            echo "Fallback configure failed! Check logs above for details."
            exit 1
          }
          meson setup build \
            --cross-file emscripten_cross.txt \
            --buildtype=release \
            --prefix="$(pwd)/build/i386-softmmu" || {
            echo "Fallback Meson configuration failed! Check logs above for details."
            exit 1
          }
          export CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1"
          export LDFLAGS="-s USE_SDL=2 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -o build/i386-softmmu/qemu-system-i386.js"
          emmake ninja -C build -j2 -v || {
            echo "Fallback build failed! Check logs for details."
            ls -la build || echo "Directory build not found in fallback."
            exit 1
          }
          echo "Fallback build completed, checking binaries:"
          ls -la build/i386-softmmu
        working-directory: .

      - name: Verify Output Files
        run: |
          if [ ! -d "qemu/build/i386-softmmu" ]; then
            echo "Error: Directory qemu/build/i386-softmmu does not exist!"
            ls -la qemu/build || echo "Directory qemu/build not found either."
            exit 1
          fi
          cd qemu/build/i386-softmmu
          if [ ! -f "qemu-system-i386.js" ] || [ ! -f "qemu-system-i386.wasm" ] || [ ! -s "qemu-system-i386.wasm" ]; then
            echo "Error: Missing or empty qemu-system-i386.js or qemu-system-i386.wasm!"
            ls -la .
            exit 1
          fi
          echo "Output files verified:"
          ls -la qemu-system-i386.*
        working-directory: .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-i386
          path: qemu/build/i386-softmmu/qemu-system-i386.*
          if-no-files-found: error
          retention-days: 7

      - name: Cleanup
        run: |
          rm -rf qemu emsdk
          echo "Cleaned up temporary files."

      - name: Notify Build Status
        if: always()
        run: |
          echo "QEMU WebAssembly build completed with status: ${{ job.status }}"
          echo "Note: If the build failed, consider checking community projects like https://github.com/atrosinenko/qemujs for additional patches."
