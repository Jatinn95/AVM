#!/bin/bash

# Configuration
REPO_OWNER="your-username"  # Replace with your GitHub username or organization
REPO_NAME="your-repo"      # Replace with your repository name
WORKFLOW_RUN_ID=""         # Leave empty to auto-detect the latest run, or specify a run ID
GITHUB_TOKEN="your-token"  # Replace with your GitHub Personal Access Token
OUTPUT_DIR="./artifacts"   # Directory where artifacts will be downloaded

# Ensure jq is installed (for JSON parsing)
if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed. Please install it (e.g., 'sudo apt install jq' on Ubuntu)."
    exit 1
fi

# Ensure curl is installed
if ! command -v curl &> /dev/null; then
    echo "Error: curl is required but not installed. Please install it (e.g., 'sudo apt install curl' on Ubuntu)."
    exit 1
fi

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Function to get the latest workflow run ID if not specified
get_latest_run_id() {
    echo "Fetching the latest workflow run ID for Build QEMU WebAssembly (Advanced)..."
    WORKFLOW_RUN_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/build-qemu-webassembly.yml/runs" | \
        jq -r '.workflow_runs[0].id')
    if [ -z "$WORKFLOW_RUN_ID" ] || [ "$WORKFLOW_RUN_ID" == "null" ]; then
        echo "Error: Could not fetch the latest workflow run ID. Please check your token or repository details."
        exit 1
    fi
    echo "Latest workflow run ID: $WORKFLOW_RUN_ID"
}

# Get workflow run ID if not provided
if [ -z "$WORKFLOW_RUN_ID" ]; then
    get_latest_run_id
fi

# Fetch the list of artifacts for the workflow run
echo "Fetching artifacts for workflow run $WORKFLOW_RUN_ID..."
ARTIFACTS_JSON=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
    -H "Accept: application/vnd.github.v3+json" \
    "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/runs/$WORKFLOW_RUN_ID/artifacts")

# Check if artifacts exist
ARTIFACT_COUNT=$(echo "$ARTIFACTS_JSON" | jq -r '.total_count')
if [ "$ARTIFACT_COUNT" -eq 0 ]; then
    echo "Error: No artifacts found for workflow run $WORKFLOW_RUN_ID."
    exit 1
fi

# Extract artifact details
ARTIFACT_IDS=($(echo "$ARTIFACTS_JSON" | jq -r '.artifacts[].id'))
ARTIFACT_NAMES=($(echo "$ARTIFACTS_JSON" | jq -r '.artifacts[].name'))

# Download each artifact
for i in "${!ARTIFACT_IDS[@]}"; do
    ARTIFACT_ID="${ARTIFACT_IDS[$i]}"
    ARTIFACT_NAME="${ARTIFACT_NAMES[$i]}"
    echo "Downloading artifact: $ARTIFACT_NAME (ID: $ARTIFACT_ID)..."

    # Get the download URL for the artifact
    DOWNLOAD_URL=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/artifacts/$ARTIFACT_ID" | \
        jq -r '.archive_download_url')

    if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
        echo "Error: Could not retrieve download URL for artifact $ARTIFACT_NAME."
        continue
    fi

    # Download the artifact ZIP file
    curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        "$DOWNLOAD_URL" -o "$OUTPUT_DIR/$ARTIFACT_NAME.zip"

    if [ $? -eq 0 ]; then
        echo "Successfully downloaded $ARTIFACT_NAME.zip"
        # Unzip the artifact
        unzip -o "$OUTPUT_DIR/$ARTIFACT_NAME.zip" -d "$OUTPUT_DIR/$ARTIFACT_NAME"
        if [ $? -eq 0 ]; then
            echo "Extracted $ARTIFACT_NAME.zip to $OUTPUT_DIR/$ARTIFACT_NAME"
            # Optionally remove the ZIP file after extraction
            rm "$OUTPUT_DIR/$ARTIFACT_NAME.zip"
        else
            echo "Error: Failed to extract $ARTIFACT_NAME.zip"
        fi
    else
        echo "Error: Failed to download $ARTIFACT_NAME.zip"
    fi
done

echo "Download process completed. Check the '$OUTPUT_DIR' directory for the build files."
