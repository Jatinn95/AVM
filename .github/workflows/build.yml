name: Build QEMU WebAssembly (Advanced)
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "latest"
      ARTIFACT_RETENTION_DAYS: 7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Latest QEMU Version
        id: fetch-qemu-version
        run: |
          echo "Fetching latest QEMU version..."
          QEMU_VERSION=$(curl -s https://download.qemu.org/ | grep -oP 'qemu-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -1)
          if [ -z "$QEMU_VERSION" ]; then
            echo "Error: Failed to fetch QEMU version."
            exit 1
          fi
          echo "Latest QEMU version: $QEMU_VERSION"
          echo "QEMU_VERSION=$QEMU_VERSION" >> $GITHUB_ENV
        timeout-minutes: 5

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build curl

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v3
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v2
          restore-keys: |
            emsdk-${{ runner.os }}-

      - name: Install Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          if [ ! -f "emsdk" ]; then
            echo "Emscripten not installed yet, installing..."
            ./emsdk install ${{ env.EMSDK_VERSION }} || {
              echo "Failed to install Emscripten, retrying once..."
              ./emsdk install ${{ env.EMSDK_VERSION }}
            }
          else
            echo "Emscripten directory exists, updating..."
            ./emsdk update
          fi
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
        working-directory: .
        timeout-minutes: 15

      - name: Cache QEMU Source
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.QEMU_VERSION }}
          key: qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}
          restore-keys: |
            qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}

      - name: Download QEMU Source
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          echo "Attempting to download QEMU ${{ env.QEMU_VERSION }}..."
          wget --timeout=300 --tries=3 https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz || {
            echo "Error: Failed to download qemu-${{ env.QEMU_VERSION }}.tar.xz."
            echo "Check version availability at https://download.qemu.org/."
            exit 1
          }
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
          echo "QEMU source downloaded and extracted successfully."
        timeout-minutes: 10

      - name: Configure QEMU
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          ./configure --target-list=${{ matrix.target }} --cc=emcc --cxx=em++ \
            --host-cc=gcc --cross-prefix="" --disable-system \
            --extra-cflags="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1" \
            --extra-ldflags="-s USE_SDL=2 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] -s ALLOW_MEMORY_GROWTH=1"
          echo "QEMU configured for target: ${{ matrix.target }}"
        working-directory: .

      - name: Build QEMU
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          emmake make -j2 V=1
          echo "QEMU build completed for target: ${{ matrix.target }}"
        working-directory: .
        timeout-minutes: 15

      - name: Test QEMU Binary
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}
          ls -la
          if [ ! -f "qemu-system-${{ matrix.target }}" ]; then
            echo "Error: QEMU binary not found!"
            exit 1
          fi
          echo "Testing QEMU binary for target: ${{ matrix.target }}"
          node --version
          echo "Running QEMU version check..."
          node qemu-system-${{ matrix.target }} --version || {
            echo "Test failed, but continuing..."
            exit 0  # Continue even if the test fails
          }
        working-directory: .

      - name: Compress Artifacts
        run: |
          cd qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}
          tar -czvf qemu-wasm-${{ matrix.target }}.tar.gz qemu-system-${{ matrix.target }}.*
          echo "Artifact compressed: qemu-wasm-${{ matrix.target }}.tar.gz"
        working-directory: .

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-wasm-${{ matrix.target }}.tar.gz
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        run: |
          echo "Cleaning up build files..."
          rm -rf qemu-${{ env.QEMU_VERSION }}
          rm -rf emsdk
          echo "Cleanup completed."

      - name: Notify Build Status
        if: always()
        run: |
          echo "Build completed for ${{ matrix.target }} with status: ${{ job.status }}"
          # Add Slack or email notification here if needed
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Build status: ${{ job.status }}"}' https://hooks.slack.com/services/...
