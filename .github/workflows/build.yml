name: Build QEMU WebAssembly for APK Runner

on: [push]

jobs:
  build-qemu-js:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Node.js for testing Qemu.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install Emscripten (optional for future custom builds)
      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
        working-directory: .
        timeout-minutes: 10

      # Step 4: Install basic build tools
      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git python3 ninja-build

      # Step 5: Fetch Pre-built Qemu.js and WASM with enforced local fallback
      - name: Fetch Pre-built Qemu.js and WASM
        run: |
          mkdir -p qemujs-binaries
          # Download qemu-system-i386.js from original source
          wget -O qemujs-binaries/qemu-system-i386.js https://atrosinenko.github.io/qemujs-demo/qemu-system-i386.js || {
            echo "Failed to download qemu-system-i386.js from original source!"
            cp ../qemu-system-i386.js qemujs-binaries/ 2>/dev/null || {
              echo "No local qemu-system-i386.js found in repository! Please add it."
              exit 1
            }
          }
          # Skip original wasm download (404) and rely on local copy
          echo "Note: Skipping https://atrosinenko.github.io/qemujs-demo/qemu-system-i386.wasm (404 Not Found)"
          cp ../qemu-system-i386.wasm qemujs-binaries/ || {
            echo "Failed to find qemu-system-i386.wasm in repository root!"
            echo "You must add qemu-system-i386.wasm to the repository root."
            echo "Options:"
            echo "1. Download from a working source and commit it."
            echo "2. Build it with qemujs-builder: https://github.com/atrosinenko/qemujs-builder"
            echo "3. Check https://github.com/atrosinenko/qemujs-demo/issues for updates."
            exit 1
          }
          ls -la qemujs-binaries
          # Verify both files exist
          if [ ! -f "qemujs-binaries/qemu-system-i386.js" ] || [ ! -f "qemujs-binaries/qemu-system-i386.wasm" ]; then
            echo "Error: Missing one or both QEMU files!"
            exit 1
          fi
        working-directory: .

      # Step 6: Test Qemu.js Binary
      - name: Test Qemu.js Binary
        run: |
          cd qemujs-binaries
          echo "Testing Qemu.js binary..."
          if [ -f "qemu-system-i386.js" ]; then
            node qemu-system-i386.js --version || echo "Test may fail as Qemu.js might not support --version directly."
          else
            echo "Error: qemu-system-i386.js not found, skipping test."
          fi
        working-directory: .

      # Step 7: Upload Qemu.js Artifacts
      - name: Upload Qemu.js Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-js-prebuilt
          path: qemujs-binaries/*
          if-no-files-found: error
          retention-days: 7

      # Step 8: Cleanup
      - name: Cleanup
        run: |
          rm -rf emsdk qemujs-binaries

      # Step 9: Notify Build Status with Usage Notes
      - name: Notify Build Status
        if: always()
        run: |
          echo "Qemu.js build job completed with status: ${{ job.status }}"
          echo "Next steps:"
          echo "1. Ensure qemu-system-i386.wasm is in the repository root before running this workflow."
          echo "2. Download artifacts (qemu-system-i386.js and .wasm) and place them with index.html."
          echo "3. Customize an Android-x86 ISO with ADB:"
          echo "   - Extract ISO, unsquash system.sfs, add adbd to /system/bin/, enable USB debugging in build.prop, repack."
          echo "   - See: https://android-x86.org for ISO downloads."
          echo "4. Update index.html to forward ADB port: Add '-net user,hostfwd=tcp::5555-:5555' to Module.arguments."
          echo "5. Run locally: python -m http.server 8000, then use 'adb connect localhost:5555' for shell access."
