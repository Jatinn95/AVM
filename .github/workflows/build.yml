name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "3.1.62"
      ARTIFACT_RETENTION_DAYS: 7
      PYTHON_VERSION: "3.11"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Build Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build \
            zlib1g-dev libfdt-dev libcap-dev libattr1-dev wget libssl-dev

      - name: Install Emscripten
        timeout-minutes: 20
        run: |
          git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh

      - name: Fetch QEMU Source
        run: |
          git clone https://github.com/qemu/qemu.git
          cd qemu
          git fetch --tags
          git checkout v9.0.0 || {
            echo "Tag v9.0.0 not found, falling back to latest master"
            git checkout master
          }

      - name: Patch QEMU Source for Emscripten
        run: |
          cd qemu
          sed -i 's/check_cc_bug() {/check_cc_bug() {\n    return 0/' configure
          sed -i '/check_define __EMSCRIPTEN__/a\if test "$?" = "0"; then\n    emscripten=yes\nelse\n    emscripten=no\nfi' configure

      - name: Create Compiler Wrappers
        run: |
          cd qemu
          cat > emcc-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              case "$arg" in
                  "-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/emcc" "${args[@]}"
          EOF
          chmod +x emcc-wrapper.sh
          echo "EMCC_WRAPPER=$(pwd)/emcc-wrapper.sh" >> $GITHUB_ENV

          cat > emxx-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              case "$arg" in
                  "-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/em++" "${args[@]}"
          EOF
          chmod +x emxx-wrapper.sh
          echo "EMXX_WRAPPER=$(pwd)/emxx-wrapper.sh" >> $GITHUB_ENV

      - name: Configure QEMU
        id: configure
        env:
          CC: "${{ env.EMCC_WRAPPER }}"
          CXX: "${{ env.EMXX_WRAPPER }}"
          LD: "${{ env.EMCC_WRAPPER }}"
          TARGET_ARCH: ${{ matrix.target == 'i386-softmmu' && 'i386' || 'x86_64' }}
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu

          if [ "$TARGET_ARCH" = "i386" ]; then
            EXTRA_CFLAGS="-m32 -DNO_FUTEX=1 -D__EMSCRIPTEN__ -Wno-ignored-optimization-argument"
          else
            EXTRA_CFLAGS="-DNO_FUTEX=1 -D__EMSCRIPTEN__ -Wno-ignored-optimization-argument"
          fi

          emconfigure ./configure \
            --python=python3 \
            --target-list="${{ matrix.target }}" \
            --disable-xen \
            --disable-userthur \
            --disable-linux-user \
            --disable-bsd-user \
            --disable-tools \
            --disable-vnc \
            --disable-gtk \
            --cross-prefix="" \
            --cc="$CC" \
            --cxx="$CXX" \
            --extra-cflags="$EXTRA_CFLAGS" \
            --extra-ldflags="-s USE_PTHREADS=0 -s WASM=1 -s TOTAL_MEMORY=256MB -s FORCE_FILESYSTEM=1" \
            --disable-pie \
            --disable-werror \
            --disable-stack-protector \
            --disable-docs || {
              echo "Configure failed! Dumping config.log:"
              cat config.log
              exit 1
            }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        timeout-minutes: 30
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu
          ARCH="${{ matrix.target }}"
          ARCH="${ARCH%-softmmu}"

          emmake make -j$(nproc) V=1 qemu-system-$ARCH \
            CFLAGS="-s USE_SDL=2 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
            LDFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1"

          if [ ! -f "${{ matrix.target }}/qemu-system-$ARCH.wasm" ]; then
            echo "Error: .wasm file not generated!"
            ls -lh "${{ matrix.target }}"
            exit 1
          fi

      - name: Upload Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemu/${{ matrix.target }}/qemu-system-*.wasm
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemu emsdk
