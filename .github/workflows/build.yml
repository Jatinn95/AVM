      - name: Patch QEMU Source
        run: |
          cd qemu
          
          # Configure patches
          sed -i 's/check_cc_bug() {/check_cc_bug() {\n    return 0/' configure
          sed -i '/uname -s/i\# Force host OS for Emscripten\nhost_os=linux\nbogus_os=no' configure
          sed -i 's/error_exit "Unrecognized host OS \(.*\)"/if [ "$host_os" = "linux" ]; then echo "Bypassing OS check for Emscripten"; else error_exit "Unrecognized host OS ($1)"; fi/' configure
          
          # Meson patches
          sed -i "/error.*You either need GCC v7.4/i\if cc.has_header('emscripten.h')\n  message('Emscripten detected, skipping version check')\nelse" meson.build
          sed -i '/error.*You either need GCC v7.4/a\endif' meson.build
          sed -i "/appleframeworks_dep = dependency('appleframeworks'/i\if cc.has_header('emscripten.h')\n  appleframeworks_dep = declare_dependency()\nelse" meson.build
          sed -i "/appleframeworks_dep = dependency('appleframeworks'/a\endif" meson.build
          
          # Memory management patches
          sed -i '1i#include <errno.h>' util/memfd.c
          # Instead of removing CONFIG_MEMFD block, ensure itâ€™s disabled and stubbed
          sed -i '/#ifdef CONFIG_MEMFD/a\
          #ifdef __EMSCRIPTEN__\
          #undef CONFIG_MEMFD\
          #endif' util/memfd.c
          sed -i '/#include <sys\/memfd.h>/a\
          #ifdef __EMSCRIPTEN__\
          int memfd_create(const char *name, unsigned int flags) {\
              errno = ENOSYS;\
              return -1;\
          }\
          #endif' util/memfd.c
          
          sed -i 's/size_t len;/gsize len;/' util/oslib-posix.c
