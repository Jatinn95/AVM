name: Build QEMU WebAssembly (Advanced)
on: [push]
jobs:
  build-from-source:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    continue-on-error: true
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      QEMU_VERSION: "9.2.0"
      EMSDK_VERSION: "3.1.55"  # Pin to a specific version for stability
      ARTIFACT_RETENTION_DAYS: 7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Update to latest version

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libsdl2-dev libpixman-1-dev ninja-build git

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v4  # Update to latest version
        with:
          path: ~/emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v2
          restore-keys: |
            emsdk-${{ runner.os }}-

      - name: Install and Activate Emscripten
        run: |
          mkdir -p ~/emsdk
          cd ~/emsdk
          if [ ! -d ".git" ]; then
            echo "Cloning Emscripten SDK..."
            git clone https://github.com/emscripten-core/emsdk.git .
          else
            echo "Updating Emscripten SDK..."
            git pull
          fi
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          source ./emsdk_env.sh
          echo "EMSDK_PATH=$HOME/emsdk" >> $GITHUB_ENV
          echo "Emscripten version: $(emcc --version)"
        timeout-minutes: 15

      - name: Cache QEMU Source
        id: cache-qemu
        uses: actions/cache@v4
        with:
          path: qemu-${{ env.QEMU_VERSION }}
          key: qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}-v1
          restore-keys: |
            qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}

      - name: Download QEMU Source
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          wget --timeout=300 --tries=3 https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz || {
            echo "Failed to download QEMU source. Exiting."
            exit 1
          }
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
        timeout-minutes: 10

      - name: Patch QEMU Configure Script
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          sed -i '/Unrecognized host OS/ s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux"\nhost_os=linux|' configure
          sed -i 's|error_exit "sizeof(size_t) doesn.t match GLIB_SIZEOF_SIZE_T.|echo "Skipping GLib size check for WebAssembly"|' configure
          grep -A 5 "sizeof(size_t) doesn.t match GLIB_SIZEOF_SIZE_T" configure

      - name: Patch QEMU Meson Build File
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          sed -i "s|error('You either need GCC v7.4|message('Bypassing compiler check for Emscripten')|" meson.build
          sed -n '320,340p' meson.build

      - name: Create Meson Cross-File
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          cat > emscripten-cross.txt << 'EOF'
          [binaries]
          c = 'emcc'
          cpp = 'em++'
          ar = 'emar'
          strip = 'emstrip'
          pkgconfig = 'pkg-config'

          [properties]
          needs_exe_wrapper = true

          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm'
          cpu = 'wasm32'
          endian = 'little'
          EOF
          cat emscripten-cross.txt

      - name: Configure QEMU for WebAssembly
        id: configure
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          emconfigure ./configure \
            --cross-prefix="" \
            --target-list=${{ matrix.target }} \
            --enable-tcg-interpreter \
            --disable-xen \
            --disable-user \
            --disable-tools \
            --disable-docs \
            --disable-guest-agent \
            --enable-system || {
            echo "Configure failed."
            echo "CONFIGURE_SUCCEEDED=false" >> $GITHUB_ENV
            exit 1
          }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV
        timeout-minutes: 10

      - name: Build QEMU with WASM Output
        if: env.CONFIGURE_SUCCEEDED == 'true'
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          emmake make -j2 V=1 \
            CFLAGS="-O2 -s USE_SDL=2 -s ASSERTIONS=1" \
            LDFLAGS="-s WASM=1 -s EXPORT_NAME='QEMU_${{ matrix.target }}' -s MODULARIZE=1 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1 -s ENVIRONMENT=web" || {
            echo "Build failed. Listing directory contents:"
            ls -la ${{ matrix.target }}/
            exit 1
          }
          ls -la ${{ matrix.target }}/
        timeout-minutes: 20

      - name: Test QEMU Binary
        if: env.CONFIGURE_SUCCEEDED == 'true'
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}
          if [ -f "qemu-system-${{ matrix.target }}.wasm" ]; then
            echo "WASM file found: qemu-system-${{ matrix.target }}.wasm"
            file qemu-system-${{ matrix.target }}.wasm
          else
            echo "Error: .wasm file not generated."
            ls -la
          fi

      - name: Upload Artifacts
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: |
            qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-system-${{ matrix.target }}.js
            qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-system-${{ matrix.target }}.wasm
          if-no-files-found: error  # Fail if no files are found
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        run: |
          rm -rf qemu-${{ env.QEMU_VERSION }}
          rm -rf ~/emsdk

      - name: Notify Build Status
        if: always()
        run: |
          echo "Build status for ${{ matrix.target }}: ${{ job.status }}"

  prebuilt-qemu-js:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Emscripten
        run: |
          mkdir -p ~/emsdk
          cd ~/emsdk
          git clone https://github.com/emscripten-core/emsdk.git .
          ./emsdk install 3.1.55
          ./emsdk activate 3.1.55
          source ./emsdk_env.sh
          echo "EMSDK_PATH=$HOME/emsdk" >> $GITHUB_ENV
          echo "Emscripten version: $(emcc --version)"
        timeout-minutes: 10

      - name: Fetch and Build Qemu.js
        run: |
          git clone https://github.com/atrosinenko/qemujs.git
          cd qemujs
          sudo apt-get update
          sudo apt-get install -y make build-essential python3 libsdl2-dev libpixman-1-dev
          sed -i '/Unrecognized host OS/ s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux"\nhost_os=linux|' configure
          sed -i 's|error_exit "sizeof(size_t) doesn.t match GLIB_SIZEOF_SIZE_T.|echo "Skipping GLib size check"|' configure
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          emconfigure ./configure \
            --target-list=i386-softmmu \
            --enable-tcg-interpreter \
            --disable-xen \
            --disable-guest-agent \
            --disable-docs \
            --disable-tools \
            --enable-system \
            --disable-user || {
            echo "Configure failed."
            exit 1
          }
          emmake make -j2 \
            CFLAGS="-O2 -s USE_SDL=2 -s ASSERTIONS=1" \
            LDFLAGS="-s WASM=1 -s EXPORT_NAME='QEMU' -s MODULARIZE=1 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1 -s ENVIRONMENT=web" || {
            echo "Build failed."
            ls -la i386-softmmu/
            exit 1
          }
          ls -la i386-softmmu/

      - name: Test Qemu.js Binary
        run: |
          cd qemujs/i386-softmmu
          if [ -f "qemu-system-i386.wasm" ]; then
            echo "WASM file found: qemu-system-i386.wasm"
            file qemu-system-i386.wasm
          else
            echo "Error: .wasm file not generated."
            ls -la
          fi

      - name: Upload Qemu.js Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-js-prebuilt
          path: |
            qemujs/i386-softmmu/qemu-system-i386.js
            qemujs/i386-softmmu/qemu-system-i386.wasm
          if-no-files-found: error
          retention-days: 7

      - name: Cleanup
        run: |
          rm -rf qemujs
          rm -rf ~/emsdk

      - name: Notify Build Status
        if: always()
        run: |
          echo "Prebuilt Qemu.js status: ${{ job.status }}"
