- name: Build Qemu.js
  run: |
    cd qemu
    echo "Patching meson.build to allow emcc, em++, any GCC version, and wasm CPU..."
    echo "Dumping meson.build context before patching:"
    sed -n '300,350p' meson.build
    sed -n '870,880p' meson.build
    echo "Checking file identity:"
    head -n 5 meson.build
    # Backup meson.build for debugging
    cp meson.build meson.build.bak
    # Test compiler pattern match
    echo "Testing compiler pattern match..."
    grep -A 10 "compiler = meson.get_compiler(lang)" meson.build || {
      echo "Error: Compiler pattern not found!"
      sed -n '300,350p' meson.build
      exit 1
    }
    # Delete original compiler check block
    echo "Deleting original compiler check block..."
    sed -i "/compiler = meson.get_compiler(lang)/,/endforeach/{/if compiler.get_id() == 'gcc' and compiler.version().version_compare('>=7.4')/,/endif/d}" meson.build || {
      echo "Error: Failed to delete original compiler check block!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      exit 1
    }
    # Insert new compiler checks
    echo "Inserting new compiler checks..."
    sed -i "/compiler = meson.get_compiler(lang)/a\  if compiler.get_id() == 'emcc' or compiler.get_id() == 'em++'\n    # ok\n  endif\n  if compiler.get_id() == 'gcc' or compiler.get_id() == 'clang'\n    # ok\n  endif" meson.build || {
      echo "Error: Failed to insert new compiler checks!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      exit 1
    }
    echo "Verifying emcc/em++ patch..."
    grep "if compiler.get_id() == 'emcc' or compiler.get_id() == 'em++'" meson.build || {
      echo "Error: emcc/em++ patch not found!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      exit 1
    }
    echo "Verifying gcc/clang patch..."
    grep "if compiler.get_id() == 'gcc' or compiler.get_id() == 'clang'" meson.build || {
      echo "Error: gcc/clang patch not found!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      exit 1
    }
    # Patch CPU check
    echo "Applying CPU patch..."
    sed -i "/error('Unsupported CPU.*try --enable-tcg-interpreter'/c\    # Allow wasm CPU with TCG interpreter" meson.build || {
      echo "Error: Failed to patch meson.build for CPU check!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '870,880p' meson.build
      exit 1
    }
    echo "Verifying CPU patch..."
    ! grep "error('Unsupported CPU" meson.build || {
      echo "Error: CPU patch not applied correctly!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '870,880p' meson.build
      exit 1
    }
    echo "Verifying all patches..."
    grep "if compiler.get_id() == 'emcc' or compiler.get_id() == 'em++'" meson.build && \
    grep "if compiler.get_id() == 'gcc' or compiler.get_id() == 'clang'" meson.build && \
    ! grep "error('You either need GCC v7.4" meson.build && \
    ! grep "error('Unsupported CPU" meson.build && \
    grep "endforeach" meson.build | grep -q "foreach lang : all_languages" -B 10 || {
      echo "Error: Patch verification failed! Dumping context for debugging:"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      sed -n '870,880p' meson.build
      exit 1
    }
    echo "Checking meson.build syntax..."
    meson introspect meson.build --ast || {
      echo "Error: meson.build syntax check failed!"
      echo "Dumping diff for debugging:"
      diff -u meson.build.bak meson.build || true
      sed -n '300,350p' meson.build
      exit 1
    }
    echo "Creating Emscripten cross-file..."
    cat > emscripten-cross.txt << 'EOF'
    [binaries]
    c = 'emcc'
    cpp = 'em++'
    ar = 'emar'
    strip = 'emstrip'
    pkg-config = 'pkg-config'
    [properties]
    needs_exe_wrapper = true
    [host_machine]
    system = 'emscripten'
    cpu_family = 'wasm'
    cpu = 'wasm32'
    endian = 'little'
    EOF
    echo "Creating minimal config-host.mak..."
    mkdir -p build
    cat > build/config-host.mak << 'EOF'
    SRC_PATH=/home/runner/work/AVM/AVM/qemu
    TARGET_DIRS=i386-softmmu
    CONFIG_SDL=y
    CONFIG_XEN=n
    CONFIG_KVM=n
    CONFIG_VNC=n
    CONFIG_DOCS=n
    CONFIG_TOOLS=n
    CONFIG_GUEST_AGENT=n
    CONFIG_LINUX=y
    CONFIG_TCG_INTERPRETER=y
    EOF
    echo "Setting up Meson for cross-compilation..."
    source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
    meson setup build \
      --cross-file emscripten-cross.txt \
      -Dsdl=enabled \
      -Dxen=disabled \
      -Dkvm=disabled \
      -Dvnc=disabled \
      -Ddocs=disabled \
      -Dtools=disabled \
      -Dguest_agent=disabled \
      -Dtcg_interpreter=true \
      -Db_lto=true \
      -Doptimization=2 || {
      echo "Error: Meson setup failed!"
      if [ -f build/meson-logs/meson-log.txt ]; then
        echo "Dumping meson-log.txt for debugging..."
        cat build/meson-logs/meson-log.txt
      fi
      exit 1
    }
    echo "Building with ninja..."
    cd build
    ninja i386-softmmu/qemu-system-i386 CFLAGS="-s WASM=1 -s USE_SDL=2 -s ASSERTIONS=1" LDFLAGS="-s WASM=1 -s USE_SDL=2 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1" || {
      echo "Error: Ninja build failed!"
      exit 1
    }
    echo "Build completed, listing generated files..."
    ls -la i386-softmmu/qemu-system-i386*
    if [ -f "i386-softmmu/qemu-system-i386.wasm" ]; then
      FILE_SIZE=$(stat -f%z i386-softmmu/qemu-system-i386.wasm 2>/dev/null || stat -c%s i386-softmmu/qemu-system-i386.wasm)
      echo "qemu-system-i386.wasm size: $FILE_SIZE bytes"
      if [ "$FILE_SIZE" -eq 0 ]; then
        echo "Error: qemu-system-i386.wasm is empty!"
        exit 1
      fi
    else
      echo "Error: qemu-system-i386.wasm not generated!"
      exit 1
    fi
    if [ -f "i386-softmmu/qemu-system-i386.js" ]; then
      FILE_SIZE=$(stat -f%z i386-softmmu/qemu-system-i386.js 2>/dev/null || stat -c%s i386-softmmu/qemu-system-i386.js)
      echo "qemu-system-i386.js size: $FILE_SIZE bytes"
    else
      echo "Warning: qemu-system-i386.js not generated!"
    fi
    mkdir -p ../../qemujs-binaries
    echo "Copying generated files..."
    cp i386-softmmu/qemu-system-i386.js ../../qemujs-binaries/ || echo "Warning: No qemu-system-i386.js found."
    cp i386-softmmu/qemu-system-i386.wasm ../../qemujs-binaries/ || {
      echo "Error: Failed to copy qemu-system-i386.wasm!"
      exit 1
    }
    cp i386-softmmu/*.data ../../qemujs-binaries/ 2>/dev/null || echo "No .data files found."
    echo "Listing copied files in qemujs-binaries..."
    ls -la ../../qemujs-binaries
  working-directory: .
