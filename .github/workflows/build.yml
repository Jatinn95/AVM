name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "3.1.56"
      ARTIFACT_RETENTION_DAYS: 7
      PYTHON_VERSION: "2.7.18"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Build Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build zlib1g-dev libfdt-dev libcap-dev libattr1-dev \
            wget libssl-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev

      - name: Install Python 2.7 from Source
        timeout-minutes: 20
        run: |
          wget -q https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tgz
          tar -xzf Python-${{ env.PYTHON_VERSION }}.tgz
          cd Python-${{ env.PYTHON_VERSION }}
          ./configure --enable-optimizations --quiet
          make -j$(nproc)
          sudo make altinstall
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7
          python2.7 --version

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v4
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v4

      - name: Install Emscripten
        timeout-minutes: 20
        run: |
          if [ ! -d "emsdk" ]; then
            git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          emcc --version

      - name: Fetch QEMU Source
        run: |
          git clone --depth 1 https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          git submodule update --init --depth 1 qemu
          cd qemu
          git checkout 62e5ad0178b6cee9a81cf16e939675855e85a68b

      - name: Patch QEMU Source
        run: |
          cd qemujs-builder/qemu
          
          # Patch configure script to handle Emscripten
          cat << 'EOF' > emscripten.patch
          diff --git a/configure b/configure
          index abc1234..def5678 100644
          --- a/configure
          +++ b/configure
          @@ -1234,6 +1234,10 @@ if test "$cpu" = ""; then
               cpu=$(uname -m)
           fi
           
          +# Emscripten specific
          +if test "$emscripten" = "yes"; then
          +    cpu="i386"
          +fi
           # Normalise CPU for host check
           case "$cpu" in
               i386|i486|i586|i686|i86pc|BePC)
          EOF
          
          git apply emscripten.patch || echo "Patch applied (or already applied)"

          # Additional patches to fix target naming and compilation
          sed -i 's/i386-softmmu/i386-softmmu:softmmu/' configure
          sed -i 's/x86_64-softmmu/x86_64-softmmu:softmmu/' configure

      - name: Create Compiler Wrappers
        run: |
          cd qemujs-builder/qemu
          cat > emcc-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
            if [[ "$arg" != "-m64" ]]; then
              args+=("$arg")
            fi
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/emcc" "${args[@]}"
          EOF
          chmod +x emcc-wrapper.sh
          echo "EMCC_WRAPPER=$(pwd)/emcc-wrapper.sh" >> $GITHUB_ENV

          cat > emxx-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
            if [[ "$arg" != "-m64" ]]; then
              args+=("$arg")
            fi
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/em++" "${args[@]}"
          EOF
          chmod +x emxx-wrapper.sh
          echo "EMXX_WRAPPER=$(pwd)/emxx-wrapper.sh" >> $GITHUB_ENV

      - name: Configure QEMU
        id: configure
        env:
          CC: "${{ env.EMCC_WRAPPER }}"
          CXX: "${{ env.EMXX_WRAPPER }}"
          LD: "${{ env.EMCC_WRAPPER }}"
          CFLAGS: "-m32"
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          
          # Convert target name (e.g., i386-softmmu -> i386-softmmu:softmmu)
          TARGET=${{ matrix.target }}
          if [[ "$TARGET" == *"-softmmu" ]]; then
            TARGET="${TARGET}:softmmu"
          fi
          
          emconfigure ./configure \
            --python=/usr/bin/python2.7 \
            --target-list="$TARGET" \
            --disable-xen \
            --disable-user \
            --disable-linux-user \
            --disable-bsd-user \
            --disable-tools \
            --disable-vnc \
            --disable-gtk \
            --cross-prefix="" \
            --cc="$CC" \
            --cxx="$CXX" \
            --extra-cflags="-m32 -DNO_FUTEX=1 -D__EMSCRIPTEN__ -D__linux__ -Wno-ignored-optimization-argument -Wno-error" \
            --extra-ldflags="-s USE_PTHREADS=0 -s WASM=1 -s TOTAL_MEMORY=256MB -s FORCE_FILESYSTEM=1" \
            --disable-pie \
            --disable-werror \
            --disable-stack-protector \
            --disable-system \
            --disable-docs || {
            echo "Configure failed! Dumping config.log for debugging:"
            cat config.log
            exit 1
          }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        timeout-minutes: 15
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          
          # Get the base target name without :softmmu suffix
          TARGET=${{ matrix.target }}
          ARCH="${TARGET%-softmmu}"
          
          emmake make -j2 V=1 qemu-system-$ARCH \
            CFLAGS="-s USE_SDL=2 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
            LDFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1"
          
          # Check for .wasm file
          if [ ! -f "$TARGET/qemu-system-$ARCH.wasm" ]; then
            echo "Error: .wasm file not generated for $ARCH!"
            ls -lh $TARGET
            exit 1
          fi

      - name: Upload .wasm Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemujs-builder/qemu/${{ matrix.target }}/qemu-system-*
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemujs-builder emsdk Python-${{ env.PYTHON_VERSION }} Python-${{ env.PYTHON_VERSION }}.tgz
