name: Rooted Android Emulator CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  android_test:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Configure and Run Android Emulator
      uses: reactivecircus/android-emulator-runner@v2
      id: emulator
      with:
        api-level: 30
        arch: x86
        target: google_apis
        profile: pixel_4
        force-avd-creation: true
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -writable-system  # Minimal options to avoid early KVM check failure
        disable-animations: true
        emulator-boot-timeout: 900  # 15 minutes in seconds
        script: |
          # Patch AVD config to enforce software rendering
          echo "Patching AVD config to force software rendering..."
          echo "hw.cpu.arch=x86" >> ~/.android/avd/test.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/test.avd/config.ini
          echo "hw.gpu.enabled=yes" >> ~/.android/avd/test.avd/config.ini

          # Kill any default emulator process started by the action
          echo "Killing any existing emulator processes..."
          pkill -f emulator || true
          sleep 2  # Brief pause to ensure process is terminated

          # Start emulator with explicit TCG acceleration
          echo "Starting emulator with TCG acceleration..."
          /usr/local/lib/android/sdk/emulator/emulator -avd test -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -writable-system -qemu -machine type=pc,accel=tcg -verbose > emulator.log 2>&1 &
          sleep 10  # Wait for emulator to begin starting
          cat emulator.log  # Output initial logs for debugging

          # Wait for emulator to be detected by adb with retries
          for attempt in {1..3}; do
            echo "Attempt $attempt to detect emulator..."
            adb wait-for-device
            sleep 10
            if adb devices | grep -q "emulator-5554"; then
              echo "Emulator detected!"
              break
            fi
            echo "Emulator not detected, retrying..."
            cat emulator.log
          done

          # Check if emulator has fully booted
          for i in {1..30}; do
            if adb shell getprop sys.boot_completed | grep -q "1"; then
              echo "Emulator booted successfully with API 30 (x86, google_apis)"
              break
            fi
            echo "Boot check $i/30: Emulator not yet booted, waiting 10 seconds..."
            sleep 10
          done

          # Fail the job if emulator doesn't boot
          if ! adb shell getprop sys.boot_completed | grep -q "1"; then
            echo "Emulator failed to boot after 5 minutes"
            cat emulator.log
            exit 1
          fi

    - name: Install Emscripten and Compile WebAssembly
      run: |
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
        source ./emsdk_env.sh
        echo 'int main() { return 360; }' > test.c
        emcc test.c -o i360.js -s EXPORTED_FUNCTIONS='["_main"]' -s WASM=1
        ls -l i360.js i360.wasm || (echo "WebAssembly compilation failed" && exit 1)
        echo "WebAssembly compiled successfully (i360.js and i360.wasm generated)"

    - name: Push WebAssembly to Emulator
      run: |
        adb push i360.js /sdcard/
        adb push i360.wasm /sdcard/
        adb shell ls /sdcard/i360.js /sdcard/i360.wasm || (echo "Failed to push files to emulator" && exit 1)
        echo "Pushed i360.js and i360.wasm to emulator"

    - name: Install Magisk for Root
      run: |
        wget -q https://github.com/topjohnwu/Magisk/releases/download/v27.0/Magisk-v27.0.apk -O Magisk.zip
        unzip Magisk.zip "common/*" -d magisk_files
        adb shell "dd if=/dev/block/by-name/ramdisk of=/sdcard/ramdisk.img"
        adb pull /sdcard/ramdisk.img
        wget -q https://github.com/topjohnwu/Magisk/releases/download/v27.0/magiskboot -O magiskboot
        chmod +x magiskboot
        ./magiskboot unpack ramdisk.img
        ./magiskboot cpio ramdisk.cpio "add 0750 init magisk_files/common/magiskinit"
        ./magiskboot repack ramdisk.img ramdisk-patched.img
        adb push ramdisk-patched.img /sdcard/ramdisk.img
        adb shell "dd if=/sdcard/ramdisk.img of=/dev/block/by-name/ramdisk"
        adb reboot
        adb wait-for-device
        adb root
        if ! adb shell su -c "id" | grep -q "uid=0(root)"; then
          echo "Root verification failed"
          exit 1
        fi
        echo "Root access enabled with Magisk!"

    - name: Install Root Tools and Verify
      run: |
        adb install Magisk.zip
        adb shell "magisk --daemon &"
        adb shell "setprop persist.sys.root_access 1"
        if ! adb shell "su -c 'whoami'" | grep -q "root"; then
          echo "Root setup failed"
          exit 1
        fi
        echo "Root tools installed and verified"

    - name: Install and Monitor Apps
      run: |
        if ! adb install app-debug.apk; then
          echo "APK installation failed"
          exit 1
        fi
        wget -q https://github.com/the-tcpdump-group/tcpdump/releases/download/tcpdump-4.99.4/tcpdump -O tcpdump
        adb push tcpdump /data/local/tmp/
        adb shell "chmod 0755 /data/local/tmp/tcpdump"
        adb shell "/data/local/tmp/tcpdump -i any -s 0 -w /sdcard/network.pcap &"
        sleep 5
        if ! adb shell "ls /sdcard/network.pcap"; then
          echo "Network capture failed to start"
          exit 1
        fi
        echo "Network monitoring started"

    - name: Setup Web Access with ngrok
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      run: |
        sudo apt-get update && sudo apt-get install -y scrcpy websockify novnc
        adb forward tcp:8888 localabstract:scrcpy
        websockify --web /usr/share/novnc 6080 localhost:8888 &
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        ./ngrok authtoken $NGROK_AUTH_TOKEN
        ./ngrok http 6080 --log=stdout > ngrok.log &
        sleep 5
        NGROK_URL=$(grep -o "https://[0-9a-z-]*\.ngrok-free.app" ngrok.log)
        echo "VNC Web URL: $NGROK_URL/vnc.html"
        echo "Access the emulator via the URL above"

    - name: Keep Alive with Health Monitoring
      run: |
        echo "Rooted emulator running for 30 minutes with health checks"
        echo "Network logs: /sdcard/network.pcap"
        echo "Use 'adb pull /sdcard/network.pcap' to retrieve logs"
        for i in {1..30}; do
          if ! adb shell getprop | grep -q "ro.build.version.sdk"; then
            echo "Emulator failed at minute $i"
            exit 1
          fi
          if ! adb shell "su -c 'whoami'" | grep -q "root"; then
            echo "Root access lost at minute $i"
            exit 1
          fi
          echo "Health check passed at minute $i"
          sleep 60
        done
        echo "Emulator ran successfully for 30 minutes"
