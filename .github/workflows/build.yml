name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "3.1.62"
      ARTIFACT_RETENTION_DAYS: 7
      PYTHON_VERSION: "3.11"
      QEMU_VERSION: "v9.0.0"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Meson
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install meson
          meson --version || { echo "Meson installation failed"; exit 1; }

      - name: Install Build Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq \
            build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build \
            zlib1g-dev libfdt-dev libcap-dev libattr1-dev wget libssl-dev

      - name: Install Emscripten
        timeout-minutes: 20
        run: |
          git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          emcc --version || { echo "Emscripten setup failed"; exit 1; }

      - name: Install GLib for Emscripten
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          mkdir -p emscripten-libs
          cd emscripten-libs

          cat > emscripten-cross.txt << 'EOF'
          [binaries]
          c = '/home/runner/work/AVM/AVM/emsdk/upstream/emscripten/emcc'
          cpp = '/home/runner/work/AVM/AVM/emsdk/upstream/emscripten/em++'
          ar = '/home/runner/work/AVM/AVM/emsdk/upstream/emscripten/emar'
          strip = '/home/runner/work/AVM/AVM/emsdk/upstream/emscripten/emstrip'
          pkgconfig = '/home/runner/work/AVM/AVM/emsdk/upstream/emscripten/em_pkg_config.py'

          [properties]
          needs_exe_wrapper = true

          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm32'
          cpu = 'wasm32'
          endian = 'little'
          EOF

          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar -xzf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          emconfigure ./configure --prefix="${{ env.EMSDK_PATH }}/upstream/emscripten/cache/sysroot" --static
          emmake make -j$(nproc)
          emmake make install
          cd ..

          wget https://github.com/libffi/libffi/releases/download/v3.4.6/libffi-3.4.6.tar.gz
          tar -xzf libffi-3.4.6.tar.gz
          cd libffi-3.4.6
          sed -i '1i#include <stdlib.h>\n#include <stdbool.h>\n#ifndef __EMSCRIPTEN__' src/tramp.c
          sed -i '$a#else\n/* Emscripten stubs */\nvoid ffi_tramp_init(void) {}\nvoid *tramp_table_alloc(void) { return NULL; }\nvoid ffi_tramp_free(void *tramp) {}\nbool tramp_table_map(void *table) { return false; }\nvoid tramp_table_unmap(void *table) {}\nvoid ffi_tramp_lock(void) {}\nvoid ffi_tramp_unlock(void) {}\nbool ffi_tramp_init_os(void) { return false; }\n#endif' src/tramp.c
          echo "Patched tramp.c snippet (start):"
          head -n 10 src/tramp.c
          echo "Patched tramp.c snippet (end):"
          tail -n 10 src/tramp.c
          if ! grep -q "stdlib.h" src/tramp.c; then
            echo "Error: Failed to add stdlib.h to tramp.c!"
            exit 1
          fi
          if ! grep -q "stdbool.h" src/tramp.c; then
            echo "Error: Failed to add stdbool.h to tramp.c!"
            exit 1
          fi
          if ! grep -q "#ifndef __EMSCRIPTEN__" src/tramp.c; then
            echo "Error: Failed to add Emscripten conditional start to tramp.c!"
            exit 1
          fi
          if ! grep -q "#else" src/tramp.c; then
            echo "Error: Failed to add Emscripten else block to tramp.c!"
            exit 1
          fi
          if ! grep -q "#endif" src/tramp.c; then
            echo "Error: Failed to add Emscripten conditional end to tramp.c!"
            exit 1
          fi
          if ! grep -q "ffi_tramp_init_os" src/tramp.c; then
            echo "Error: Failed to stub ffi_tramp_init_os in tramp.c!"
            exit 1
          fi
          emconfigure ./configure --prefix="${{ env.EMSDK_PATH }}/upstream/emscripten/cache/sysroot" --disable-builddir --disable-multi-os-directory --disable-shared --enable-static
          emmake make -j$(nproc)
          emmake make install
          cd ..

          wget https://download.gnome.org/sources/glib/2.80/glib-2.80.0.tar.xz
          tar -xf glib-2.80.0.tar.xz
          cd glib-2.80.0
          meson setup build --cross-file ../emscripten-cross.txt --prefix="${{ env.EMSDK_PATH }}/upstream/emscripten/cache/sysroot" -Ddefault_library=static -Dlibmount=disabled -Dselinux=disabled -Dtests=false -Dlibffi=system
          meson compile -C build
          meson install -C build
          if [ ! -f "${{ env.EMSDK_PATH }}/upstream/emscripten/cache/sysroot/lib/pkgconfig/glib-2.0.pc" ]; then
            echo "Error: glib-2.0.pc not installed!"
            exit 1
          fi

      - name: Fetch QEMU Source
        run: |
          git clone --depth 1 --branch ${{ env.QEMU_VERSION }} https://github.com/qemu/qemu.git || {
            echo "Tag ${{ env.QEMU_VERSION }} not found, fetching tags and retrying"
            git clone https://github.com/qemu/qemu.git
            cd qemu
            git fetch --tags
            git checkout ${{ env.QEMU_VERSION }} || {
              echo "Falling back to master"
              git checkout master
            }
          }
          cd qemu
          git log -1

      - name: Patch QEMU Source for Emscripten
        run: |
          cd qemu
          sed -i 's/check_cc_bug() {/check_cc_bug() {\n    return 0/' configure
          sed -i '/uname -s/i\# Force host OS for Emscripten on Linux\nhost_os=linux\nbogus_os=no\necho "DEBUG pre-uname: host_os=$host_os, bogus_os=$bogus_os"' configure
          sed -i '/cc="$cross_cc"/a\echo "DEBUG post-cc: host_os=$host_os, bogus_os=$bogus_os"' configure
          sed -i 's/error_exit "Unrecognized host OS \(.*\)"/if [ "$host_os" = "linux" ]; then echo "DEBUG: Bypassing unrecognized OS error for linux"; else echo "DEBUG: Unrecognized host OS ($1)"; error_exit "Unrecognized host OS ($1)"; fi/' configure
          sed -i "/error.*You either need GCC v7.4/i\if cc.has_header('emscripten.h')\n  message('Emscripten detected, skipping version check')\nelse" meson.build
          sed -i '/error.*You either need GCC v7.4/a\endif' meson.build
          sed -i "/appleframeworks_dep = dependency('appleframeworks'/i\if cc.has_header('emscripten.h')\n  appleframeworks_dep = declare_dependency()\nelse" meson.build
          sed -i "/appleframeworks_dep = dependency('appleframeworks'/a\endif" meson.build
          echo "Patched configure snippet:"
          head -n 100 configure
          echo "Patched meson.build snippet:"
          grep -A 10 "appleframeworks" meson.build
          grep -A 10 "You either need GCC" meson.build
          if ! grep -q "host_os=linux" configure; then
            echo "Error: Patch failed to apply host_os=linux!"
            exit 1
          fi
          if ! grep -q "emscripten.h" meson.build; then
            echo "Error: Patch failed to apply Meson Emscripten checks!"
            exit 1
          fi

      - name: Create Compiler Wrappers
        run: |
          cd qemu
          cat > emcc-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              case "$arg" in
                  "-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits"|"-m64"|"-mcx16")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/emcc" "${args[@]}"
          EOF
          chmod +x emcc-wrapper.sh
          echo "EMCC_WRAPPER=$(pwd)/emcc-wrapper.sh" >> $GITHUB_ENV

          cat > emxx-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              case "$arg" in
                  "-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits"|"-m64"|"-mcx16")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/em++" "${args[@]}"
          EOF
          chmod +x emxx-wrapper.sh
          echo "EMXX_WRAPPER=$(pwd)/emxx-wrapper.sh" >> $GITHUB_ENV

      - name: Configure QEMU
        id: configure
        env:
          CC: "${{ env.EMCC_WRAPPER }}"
          CXX: "${{ env.EMXX_WRAPPER }}"
          LD: "${{ env.EMCC_WRAPPER }}"
          TARGET_ARCH: ${{ matrix.target == 'i386-softmmu' && 'i386' || 'x86_64' }}
          PKG_CONFIG: "${{ env.EMSDK_PATH }}/upstream/emscripten/em_pkg_config.py"
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu
          echo "DEBUG: CC=$CC, CXX=$CXX, PKG_CONFIG=$PKG_CONFIG"
          if [ "$TARGET_ARCH" = "i386" ]; then
            EXTRA_CFLAGS="-DNO_FUTEX=1 -D__EMSCRIPTEN__ -Wno-ignored-optimization-argument"
          else
            EXTRA_CFLAGS="-DNO_FUTEX=1 -D__EMSCRIPTEN__ -Wno-ignored-optimization-argument"
          fi
          export CC="${{ env.EMCC_WRAPPER }}"
          export CXX="${{ env.EMXX_WRAPPER }}"
          export PKG_CONFIG="${{ env.EMSDK_PATH }}/upstream/emscripten/em_pkg_config.py"
          emconfigure ./configure \
            --python=python3 \
            --target-list="${{ matrix.target }}" \
            --disable-xen \
            --disable-user \
            --disable-linux-user \
            --disable-bsd-user \
            --disable-tools \
            --disable-vnc \
            --disable-gtk \
            --cross-prefix="" \
            --cc="$CC" \
            --cxx="$CXX" \
            --extra-cflags="$EXTRA_CFLAGS" \
            --extra-ldflags="-s USE_PTHREADS=0 -s WASM=1 -s TOTAL_MEMORY=256MB -s FORCE_FILESYSTEM=1" \
            --disable-pie \
            --disable-werror \
            --disable-stack-protector \
            --disable-docs || {
              echo "Configure failed! Dumping logs:"
              cat config.log || echo "No config.log generated"
              cat build/meson-logs/meson-log.txt || echo "No meson-log.txt generated"
              exit 1
            }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        timeout-minutes: 30
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu
          ARCH="${{ matrix.target }}"
          ARCH="${ARCH%-softmmu}"
          emmake make -j$(nproc) V=1 qemu-system-$ARCH \
            CFLAGS="-s USE_SDL=2 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
            LDFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1" || {
              echo "Build failed!"
              exit 1
            }
          if [ ! -f "${{ matrix.target }}/qemu-system-$ARCH.wasm" ]; then
            echo "Error: .wasm file not generated!"
            ls -lh "${{ matrix.target }}"
            exit 1
          fi

      - name: Upload Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemu/${{ matrix.target }}/qemu-system-*.wasm
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemu emsdk emscripten-libs
