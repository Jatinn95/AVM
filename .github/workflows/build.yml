#!/bin/bash
set -e

# Setup Emscripten
git clone https://github.com/emscripten-core/emsdk.git
cd emsdk
./emsdk install latest
./emsdk activate latest
source ./emsdk_env.sh
cd ..

# Install dependencies (Ubuntu example)
sudo apt-get update
sudo apt-get install -y build-essential python3 python3-venv libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build git meson

# Download QEMU
QEMU_VERSION="9.2.0"
wget https://download.qemu.org/qemu-${QEMU_VERSION}.tar.xz
tar -xf qemu-${QEMU_VERSION}.tar.xz
mv qemu-${QEMU_VERSION} qemu
cd qemu

# Patch configure script
sed -i '/Unrecognized host OS/ { s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux for Emscripten build"\nhost_os=linux|; }' configure

# Patch meson.build to skip sanity check
sed -i '/run_command.*sanitycheckc_cross/s/run_command.*$/true/' meson.build || {
  echo "Failed to patch meson.build; checking content"
  grep "sanitycheckc_cross" meson.build || echo "No sanity check found"
  exit 1
}
echo "Patched meson.build to skip sanity check execution"

# Create Meson cross file
cat << EOF > emscripten_cross.txt
[binaries]
c = 'emcc'
cpp = 'em++'
ar = 'emar'
strip = 'emstrip'
pkgconfig = 'pkg-config'
exe_wrapper = './node_wrapper.sh'
[host_machine]
system = 'emscripten'
cpu_family = 'wasm'
cpu = 'wasm32'
endian = 'little'
[built-in options]
c_args = ['-m32']
c_link_args = ['-m32']
cpp_args = ['-m32']
cpp_link_args = ['-m32']
[properties]
needs_exe_wrapper = true
EOF

# Create node wrapper
cat << EOF > node_wrapper.sh
#!/bin/bash
echo "Running node wrapper with args: \$@"
node --experimental-wasm-threads --experimental-wasm-bulk-memory --experimental-wasm-unsafe-eval "\$@"
EOF
chmod +x node_wrapper.sh

# Configure and build
export CC=emcc
export CXX=em++
export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
./configure \
  --cc=emcc \
  --cxx=em++ \
  --target-list=i386-softmmu \
  --enable-tcg-interpreter \
  --disable-xen \
  --enable-sdl \
  --audio-drv-list= \
  --cross-prefix= \
  --extra-cflags="-s USE_SDL=2 -s ASSERTIONS=1 -m32" \
  --extra-ldflags="-s USE_SDL=2 -m32" || {
  echo "Configure failed!"
  exit 1
}

meson setup build \
  --cross-file emscripten_cross.txt \
  -Doptimization=2 \
  -Dstrip=false \
  -Dtarget_bits=32 \
  --reconfigure || {
  echo "Meson setup failed!"
  ls -la build/meson-private
  file build/meson-private/sanitycheckc_cross.exe || echo "Sanity check binary not found"
  cat build/meson-logs/meson-log.txt
  exit 1
}

export CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -m32"
export LDFLAGS="-s USE_SDL=2 -s EXPORTED_FUNCTIONS=['_main'] -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap'] -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -m32"
emmake ninja -C build -j2 || {
  echo "Build failed!"
  exit 1
}

# Verify output
cd build/i386-softmmu
if [ ! -f "qemu-system-i386.js" ] || [ ! -f "qemu-system-i386.wasm" ] || [ ! -s "qemu-system-i386.wasm" ]; then
  echo "Error: Missing or empty output files!"
  ls -la .
  exit 1
fi
echo "Build successful! Output files:"
ls -la qemu-system-i386.*
