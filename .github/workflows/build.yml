name: Build QEMU WebAssembly for APK Runner

on: [push]

jobs:
  build-qemu-js:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Increased due to build time
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Node.js for testing Qemu.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Step 3: Install Python 2.7
      - name: Install Python 2.7
        uses: actions/setup-python@v5
        with:
          python-version: '2.7'  # Matches QEMU’s requirement (2.4–2.7)

      # Step 4: Install Build Dependencies
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git python ninja-build libsdl2-dev libglib2.0-dev

      # Step 5: Install Emscripten
      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          emcc --version
        working-directory: .

      # Step 6: Build QEMU WebAssembly with qemujs-builder
      - name: Build QEMU WebAssembly
        run: |
          git clone https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          git submodule update --init qemu
          cd qemu
          # Source Emscripten environment
          source ../../emsdk/emsdk_env.sh
          # Configure with explicit Python 2.7
          emconfigure ./configure --target-list=i386-softmmu --enable-sdl --python=/usr/bin/python2.7
          emmake make -j$(nproc)
          # Verify output
          ls -lh i386-softmmu/
          if [ ! -f "i386-softmmu/qemu-system-i386.js" ] || [ ! -f "i386-softmmu/qemu-system-i386.wasm" ]; then
            echo "Error: Build failed to produce qemu-system-i386.js or qemu-system-i386.wasm!"
            exit 1
          fi
          echo "QEMU build completed successfully."
        working-directory: .

      # Step 7: Copy Built Files to Artifacts Directory
      - name: Prepare QEMU Artifacts
        run: |
          mkdir -p qemujs-binaries
          cp qemujs-builder/qemu/i386-softmmu/qemu-system-i386.js qemujs-binaries/
          cp qemujs-builder/qemu/i386-softmmu/qemu-system-i386.wasm qemujs-binaries/
          ls -la qemujs-binaries
          echo "Both qemu-system-i386.js and qemu-system-i386.wasm prepared."

      # Step 8: Test Qemu.js Binary
      - name: Test Qemu.js Binary
        run: |
          cd qemujs-binaries
          echo "Testing Qemu.js binary..."
          if [ -f "qemu-system-i386.js" ]; then
            node qemu-system-i386.js --version || echo "Test may fail as Qemu.js might not support --version directly."
          else
            echo "Error: qemu-system-i386.js not found, skipping test."
          fi
        working-directory: .

      # Step 9: Upload Qemu.js Artifacts
      - name: Upload Qemu.js Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-js-prebuilt
          path: qemujs-binaries/*
          if-no-files-found: error
          retention-days: 7

      # Step 10: Cleanup
      - name: Cleanup
        run: |
          rm -rf emsdk qemujs-builder qemujs-binaries

      # Step 11: Notify Build Status with Usage Notes
      - name: Notify Build Status
        if: always()
        run: |
          echo "Qemu.js build job completed with status: ${{ job.status }}"
          echo "Next steps:"
          echo "1. Download artifacts (qemu-system-i386.js and .wasm) and place with index.html."
          echo "2. Customize an Android-x86 ISO with ADB:"
          echo "   - Extract ISO, unsquash system.sfs, add adbd to /system/bin/, enable USB debugging in build.prop, repack."
          echo "   - See: https://android-x86.org for ISO downloads."
          echo "3. Update index.html to forward ADB port: Add '-net user,hostfwd=tcp::5555-:5555' to Module.arguments."
          echo "4. Run locally: python -m http.server 8000, then use 'adb connect localhost:5555' for shell access."
