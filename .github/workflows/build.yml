Run cd qemu
Patching meson.build to allow emcc and GCC...
Dumping meson.build context for debugging:
endif

modular_tcg = []
# Darwin does not support references to thread-local variables in modules
if host_os != 'darwin'
  modular_tcg = ['i386-softmmu', 'x86_64-softmmu']
endif

##################
# Compiler flags #
##################

foreach lang : all_languages
  compiler = meson.get_compiler(lang)
  if compiler.get_id() == 'gcc' and compiler.version().version_compare('>=7.4')
    # ok
  elif compiler.get_id() == 'clang' and compiler.compiles('''
      #ifdef __apple_build_version__
      # if __clang_major__ < 15 || (__clang_major__ == 15 && __clang_minor__ < 0)
      #  error You need at least XCode Clang v15.0 to compile QEMU
      # endif
      #else
      # if __clang_major__ < 10 || (__clang_major__ == 10 && __clang_minor__ < 0)
      #  error You need at least Clang v10.0 to compile QEMU
      # endif
      #endif''')
    # ok
  else
    error('You either need GCC v7.4 or Clang v10.0 (or XCode Clang v15.0) to compile QEMU')
  endif
endforeach

# default flags for all hosts
# We use -fwrapv to tell the compiler that we require a C dialect where
# left shift of signed integers is well defined and has the expected
# 2s-complement style results. (Both clang and gcc agree that it
# provides these semantics.)

qemu_common_flags = [
  '-D_GNU_SOURCE', '-D_FILE_OFFSET_BITS=64', '-D_LARGEFILE_SOURCE',
  '-fno-strict-aliasing', '-fno-common', '-fwrapv' ]
qemu_cflags = []
qemu_ldflags = []

if host_os == 'darwin'
  # Disable attempts to use ObjectiveC features in os/object.h since they
  # won't work when we're compiling with gcc as a C compiler.
  if compiler.get_id() == 'gcc'
    qemu_common_flags += '-DOS_OBJECT_USE_OBJC=0'
  endif
elif host_os == 'sunos'
Checking file identity:
project('qemu', ['c'], meson_version: '>=1.5.0',
        default_options: ['warning_level=1', 'c_std=gnu11', 'cpp_std=gnu++11', 'b_colorout=auto',
                          'b_staticpic=false', 'stdsplit=false', 'optimization=2', 'b_pie=true'],
        version: files('VERSION'))

Verifying patch...
  if compiler.get_id() == 'emcc'
  if compiler.get_id() == 'gcc'
  if compiler.get_id() == 'gcc'
Creating Emscripten cross-file...
Creating minimal config-host.mak...
Setting up Meson for cross-compilation...
Setting up EMSDK environment (suppress these messages with EMSDK_QUIET=1)
Adding directories to PATH:
PATH += /home/runner/work/AVM/AVM/emsdk
PATH += /home/runner/work/AVM/AVM/emsdk/upstream/emscripten

Setting environment variables:
PATH = /home/runner/work/AVM/AVM/emsdk:/home/runner/work/AVM/AVM/emsdk/upstream/emscripten:/opt/hostedtoolcache/node/20.19.0/x64/bin:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
EMSDK = /home/runner/work/AVM/AVM/emsdk
EMSDK_NODE = /home/runner/work/AVM/AVM/emsdk/node/20.18.0_64bit/bin/node
Clearing existing environment variable: EMSDK_PATH
WARNING: Unknown CPU family wasm, please report this at https://github.com/mesonbuild/meson/issues/new
The Meson build system
Version: 1.5.0
Source dir: /home/runner/work/AVM/AVM/qemu
Build dir: /home/runner/work/AVM/AVM/qemu/build
Build type: cross build
Project name: qemu
Project version: 9.2.0
C compiler for the host machine: emcc (emscripten 4.0.6 "emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 4.0.6 (1ddaae4d2d6dfbb678ecc193bc988820d1fc4633)")
C linker for the host machine: emcc ld.wasm 21.0.0
C compiler for the build machine: cc (gcc 13.3.0 "cc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0")
C linker for the build machine: cc ld.bfd 2.42
Build machine cpu family: x86_64
Build machine cpu: x86_64
Host machine cpu family: wasm
Host machine cpu: wasm32
Target machine cpu family: wasm
Target machine cpu: wasm32
Program scripts/symlink-install-tree.py found: YES (/usr/bin/python3 /home/runner/work/AVM/AVM/qemu/scripts/symlink-install-tree.py)
Program sh found: YES (/usr/bin/sh)
Program python3 found: YES (/usr/bin/python3)
Compiler for language rust skipped: feature rust disabled
Program iasl found: NO
Program bzip2 found: YES (/usr/bin/bzip2)

meson.build:332:4: ERROR: Problem encountered: You either need GCC v7.4 or Clang v10.0 (or XCode Clang v15.0) to compile QEMU

A full log can be found at /home/runner/work/AVM/AVM/qemu/build/meson-logs/meson-log.txt
Error: Meson setup failed!
Dumping meson-log.txt for debugging...
Build started at 2025-04-12T06:27:39.993088
Main binary: /usr/bin/python3
Build Options: -Dsdl=enabled -Dxen=disabled -Dkvm=disabled -Dvnc=disabled -Ddocs=disabled -Dtools=disabled -Dguest_agent=disabled -Db_lto=true -Doptimization=2 --cross-file=emscripten-cross.txt
Python system: Linux
The Meson build system
Version: 1.5.0
Source dir: /home/runner/work/AVM/AVM/qemu
Build dir: /home/runner/work/AVM/AVM/qemu/build
Build type: cross build
Project name: qemu
Project version: 9.2.0
-----------
Detecting compiler via: `emcc --version` -> 0
stdout:
emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 4.0.6 (1ddaae4d2d6dfbb678ecc193bc988820d1fc4633)
Copyright (C) 2025 the Emscripten authors (see AUTHORS.txt)
This is free and open source software under the MIT license.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Sanity testing C compiler: emcc
Is cross compiler: True.
Sanity check compiler command line: emcc sanitycheckc.c -o sanitycheckc_cross.exe -D_FILE_OFFSET_BITS=64 -c
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
C compiler for the host machine: emcc (emscripten 4.0.6 "emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 4.0.6 (1ddaae4d2d6dfbb678ecc193bc988820d1fc4633)")
C linker for the host machine: emcc ld.wasm 21.0.0
-----------
Detecting archiver via: `emar --version` -> 0
stdout:
LLVM (http://llvm.org/):
  LLVM version 21.0.0git
  Optimized build.
-----------
-----------
Detecting compiler via: `cc --version` -> 0
stdout:
cc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-----------
Running command: -cpp -x c -E -dM -
-----
-----------
Detecting linker via: `cc -Wl,--version` -> 0
stdout:
GNU ld (GNU Binutils for Ubuntu) 2.42
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) a later version.
This program has absolutely no warranty.
-----------
stderr:
collect2 version 13.3.0
/usr/bin/ld -plugin /usr/libexec/gcc/x86_64-linux-gnu/13/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-linux-gnu/13/lto-wrapper -plugin-opt=-fresolution=/tmp/cc5a4vJ6.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/13/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/13 -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/13/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/13/../../.. --version -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/13/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/13/../../../x86_64-linux-gnu/crtn.o
-----------
Sanity testing C compiler: cc
Is cross compiler: False.
Sanity check compiler command line: cc sanitycheckc.c -o sanitycheckc.exe -D_FILE_OFFSET_BITS=64
Sanity check compile stdout:

-----
Sanity check compile stderr:

-----
Running test binary command:  /home/runner/work/AVM/AVM/qemu/build/meson-private/sanitycheckc.exe
C compiler for the build machine: cc (gcc 13.3.0 "cc (Ubuntu 13.3.0-6ubuntu2~24.04) 13.3.0")
C linker for the build machine: cc ld.bfd 2.42
-----------
Detecting archiver via: `gcc-ar --version` -> 0
stdout:
GNU ar (GNU Binutils for Ubuntu) 2.42
Copyright (C) 2024 Free Software Foundation, Inc.
This program is free software; you may redistribute it under the terms of
the GNU General Public License version 3 or (at your option) any later version.
This program has absolutely no warranty.
-----------
Build machine cpu family: x86_64
Build machine cpu: x86_64
Host machine cpu family: wasm
Host machine cpu: wasm32
Target machine cpu family: wasm
Target machine cpu: wasm32
Program scripts/symlink-install-tree.py found: YES (/usr/bin/python3 /home/runner/work/AVM/AVM/qemu/scripts/symlink-install-tree.py)
Program sh found: YES (/usr/bin/sh)
Program python3 found: YES (/usr/bin/python3)
Compiler for language rust skipped: feature rust disabled
Program iasl found: NO
Program bzip2 found: YES (/usr/bin/bzip2)

meson.build:332:4: ERROR: Problem encountered: You either need GCC v7.4 or Clang v10.0 (or XCode Clang v15.0) to compile QEMU
Error: Process completed with exit code 1.
