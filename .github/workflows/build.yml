name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "3.1.20"
      ARTIFACT_RETENTION_DAYS: 7  # Fixed spacing issue, though YAML allows it
      PYTHON_VERSION: "2.7.18"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        run: |
          echo "Checkout started at $(date)"
          echo "Checkout completed at $(date)"

      - name: Install Build Dependencies
        run: |
          echo "Installing dependencies started at $(date)"
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build zlib1g-dev libfdt-dev libcap-dev libattr1-dev \
            wget libssl-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev
          echo "Dependencies installed at $(date)"

      - name: Install Python 2.7 from Source
        timeout-minutes: 20
        run: |
          echo "Python installation started at $(date)"
          wget -q https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tgz
          tar -xzf Python-${{ env.PYTHON_VERSION }}.tgz
          cd Python-${{ env.PYTHON_VERSION }}
          ./configure --enable-optimizations --quiet
          make -j$(nproc) >/dev/null 2>&1
          sudo make altinstall -s
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7
          python2.7 --version || { echo "Python 2.7 installation failed!"; exit 1; }
          echo "Python 2.7 installed at $(date)"

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v4
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v3
          restore-keys: |
            emsdk-${{ runner.os }}-
        run: |
          echo "Caching Emscripten started at $(date)"
          echo "Caching Emscripten completed at $(date)"

      - name: Install Emscripten
        timeout-minutes: 20
        run: |
          echo "Emscripten installation started at $(date)"
          if [ ! -d "emsdk" ]; then
            git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }} --silent
          ./emsdk activate ${{ env.EMSDK_VERSION }} --silent
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          emcc --version || { echo "Emscripten installation failed!"; exit 1; }
          echo "Emscripten ${{ env.EMSDK_VERSION }} installed at $(date)"

      - name: Test Emscripten Environment
        run: |
          echo "Testing Emscripten started at $(date)"
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          emcc --version || { echo "Emscripten not working!"; exit 1; }
          emcc -s USE_PTHREADS=0 -o test.o -c -x c - <<< "int main() { return 0; }" || { echo "Pthreads disabled test failed!"; exit 1; }
          echo "Emscripten environment verified at $(date)"

      - name: Fetch QEMU Source
        run: |
          echo "Fetching QEMU source started at $(date)"
          git clone --depth 1 https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          git submodule update --init --depth 1 qemu || { echo "Submodule update failed!"; exit 1; }
          cd qemu
          git checkout 62e5ad0178b6cee9a81cf16e939675855e85a68b
          echo "QEMU source fetched at $(date)"

      - name: Configure QEMU
        id: configure
        env:
          CC: "emcc"
          CXX: "em++"
          LD: "emcc"
        run: |
          echo "Configuring QEMU started at $(date)"
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          # Derive architecture from target (e.g., i386 from i386-softmmu)
          arch=${{ matrix.target }}-softmmu
          arch=${arch%-softmmu}
          echo "ARCH=$arch" >> $GITHUB_ENV
          ( CFLAGS="-s USE_PTHREADS=0 -DNO_FUTEX=1 -D__EMSCRIPTEN__ -D__linux__" \
            emconfigure ./configure \
              --python=/usr/bin/python2.7 \
              --target-list=${{ matrix.target }} \
              --disable-xen \
              --disable-system \
              --disable-user \
              --disable-linux-user \
              --disable-bsd-user \
              --disable-tools \
              --disable-vnc \
              --disable-gtk \
              --cross-prefix="" \
              --cc="$CC" \
              --cxx="$CXX" \
              --extra-cflags="-s USE_PTHREADS=0 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
              --extra-ldflags="-s USE_PTHREADS=0" ) || {
            echo "Configure failed! Dumping config.log for debugging:"
            cat config.log
            exit 1
          }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV
          echo "QEMU configured for ${{ matrix.target }} (arch: $arch) at $(date)"

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        timeout-minutes: 15
        run: |
          echo "Building QEMU started at $(date)"
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          # Build specific target using derived arch
          emmake make -j2 V=1 qemu-system-${{ env.ARCH }} \
            CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
            LDFLAGS="-s USE_SDL=2 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -s USE_PTHREADS=0"
          if [ ! -f "${{ matrix.target }}/qemu-system-${{ env.ARCH }}.wasm" ]; then
            echo "Error: .wasm file not generated for ${{ env.ARCH }}!"
            ls -lh ${{ matrix.target }}
            exit 1
          fi
          echo "Built .wasm file:"
          ls -lh "${{ matrix.target }}/qemu-system-${{ env.ARCH }}.wasm"
          echo "QEMU build completed for ${{ env.ARCH }} at $(date)"

      - name: Upload .wasm Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ env.ARCH }}
          path: qemujs-builder/qemu/${{ matrix.target }}/qemu-system-${{ env.ARCH }}.wasm
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          echo "Cleanup started at $(date)"
          rm -rf qemujs-builder emsdk Python-${{ env.PYTHON_VERSION }} Python-${{ env.PYTHON_VERSION }}.tgz
          echo "Cleanup completed at $(date)"

      - name: Notify Build Status
        if: always()
        run: |
          echo "Build-wasm for ${{ matrix.target }} (arch: ${{ env.ARCH }}) completed with status: ${{ job.status }} at $(date)"
