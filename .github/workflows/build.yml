name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Increased to 90 minutes for the whole job
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "latest"
      ARTIFACT_RETENTION_DAYS: 7
      PYTHON_VERSION: "2.7.18"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build zlib1g-dev libfdt-dev libcap-dev libattr1-dev \
            wget libssl-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev

      - name: Install Python 2.7 from Source
        timeout-minutes: 25  # Increased slightly to 25 minutes
        run: |
          wget https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tgz
          tar -xzf Python-${{ env.PYTHON_VERSION }}.tgz
          cd Python-${{ env.PYTHON_VERSION }}
          ./configure --enable-optimizations
          make -j$(nproc)
          sudo make altinstall
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7
          python2.7 --version || { echo "Python 2.7 installation failed!"; exit 1; }
          echo "Python installation completed at $(date)"

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v3
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v2
          restore-keys: |
            emsdk-${{ runner.os }}-

      - name: Install Emscripten
        timeout-minutes: 20  # Increased to 20 minutes
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
          echo "Emscripten installation completed at $(date)"

      - name: Test Emscripten Environment
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          emcc --version || { echo "Emscripten not working!"; exit 1; }
          which emconfigure || { echo "emconfigure not found!"; exit 1; }
          emcc -s USE_PTHREADS=0 -o test.o -c -x c - <<< "int main() { return 0; }" || { echo "Pthreads disabled compilation failed!"; exit 1; }
          echo "Emscripten environment test completed at $(date)"

      - name: Fetch QEMU Source from qemujs-builder
        run: |
          git clone https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          git submodule update --init qemu || {
            echo "Error: Submodule update failed!"
            exit 1
          }
          cd qemu
          git checkout 62e5ad0178b6cee9a81cf16e939675855e85a68b
          echo "QEMU source fetched at $(date)"

      - name: Configure QEMU
        id: configure
        env:
          CC: "emcc"
          CXX: "em++"
          LD: "emcc"
          CFLAGS: "-s USE_PTHREADS=0 -DNO_FUTEX=1"
          LDFLAGS: "-s USE_PTHREADS=0"
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          echo "Configuring QEMU for ${{ matrix.target }} at $(date)..."
          emconfigure ./configure \
            --python=/usr/bin/python2.7 \
            --target-list=${{ matrix.target }} \
            --disable-xen \
            --disable-system \
            --disable-user \
            --disable-linux-user \
            --disable-bsd-user \
            --disable-tools \
            --disable-vnc \
            --disable-gtk \
            --cc="$CC" \
            --cxx="$CXX" \
            --ld="$LD" \
            --extra-cflags="$CFLAGS" \
            --extra-ldflags="$LDFLAGS" || {
            echo "Configure failed! Dumping config.log for debugging:"
            cat config.log
            exit 1
          }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV
          echo "QEMU configuration completed at $(date)"

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          echo "Building QEMU .wasm for ${{ matrix.target }} at $(date)..."
          emmake make -j2 V=1 \
            CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -DNO_FUTEX=1" \
            LDFLAGS="-s USE_SDL=2 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1 -s USE_PTHREADS=0"
          if [ ! -f "${{ matrix.target }}/qemu-system-${{ matrix.target }}.wasm" ]; then
            echo "Error: .wasm file not generated!"
            exit 1
          fi
          echo "Built .wasm file:"
          ls -lh ${{ matrix.target }}/qemu-system-${{ matrix.target }}.wasm
          echo "QEMU build completed at $(date)"
        timeout-minutes: 20  # Increased to 20 minutes

      - name: Upload .wasm Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemujs-builder/qemu/${{ matrix.target }}/qemu-system-${{ matrix.target }}.wasm
          if-no-files-found: error
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        run: |
          rm -rf qemujs-builder emsdk Python-${{ env.PYTHON_VERSION }} Python-${{ env.PYTHON_VERSION }}.tgz

      - name: Notify Build Status
        if: always()
        run: |
          echo "Build-wasm completed for ${{ matrix.target }} with status: ${{ job.status }} at $(date)"
