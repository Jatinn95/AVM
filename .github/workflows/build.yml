name: Build QEMU WebAssembly for Android VM
on: [push, workflow_dispatch]
jobs:
  build-qemu-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      QEMU_VERSION: "9.2.0"
      EMSCRIPTEN_VERSION: "latest"
      BUILD_DIR: "qemu-build-wasm"
      OUTPUT_DIR: "qemu-wasm-dist"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git \
            python3 \
            python3-pip \
            ninja-build \
            libglib2.0-dev \
            libpixman-1-dev \
            libsdl2-dev \
            pkg-config \
            wget \
            xz-utils
          sudo pip3 install meson==1.5.0

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: 'emsdk_cache'

      - name: Download QEMU Source
        run: |
          wget -q --show-progress https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
          mv qemu-${{ env.QEMU_VERSION }} qemu-src
          rm qemu-${{ env.QEMU_VERSION }}.tar.xz

      - name: Apply Android VM Patches
        run: |
          cd qemu-src
          # Apply necessary patches for Android VM support
          # This would be where you add any custom patches for Android VM
          echo "Applying Android VM specific patches..."
          # Example: patch -p1 < ../patches/android-vm.patch

      - name: Configure QEMU for WASM
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          # Create Emscripten cross-compilation file
          cat > emscripten-cross.txt << 'EOF'
          [binaries]
          c = 'emcc'
          cpp = 'em++'
          ar = 'emar'
          strip = 'emstrip'
          pkgconfig = 'pkg-config'
          
          [properties]
          needs_exe_wrapper = true
          
          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm'
          cpu = 'wasm32'
          endian = 'little'
          EOF
          
          # Configure with Meson
          meson setup ../qemu-src \
            --cross-file emscripten-cross.txt \
            -Dtarget-list=i386-softmmu,x86_64-softmmu \
            -Dsdl=enabled \
            -Dxen=disabled \
            -Dkvm=disabled \
            -Dvnc=disabled \
            -Ddocs=disabled \
            -Dtools=disabled \
            -Dguest_agent=disabled \
            -Db_lto=true \
            -Doptimization=3 \
            -Ddebug=false \
            -Dstrip=true \
            -Db_pie=false \
            -Dcoroutine=ucontext \
            -Dandroid-vm-support=enabled

      - name: Build QEMU
        run: |
          cd ${{ env.BUILD_DIR }}
          ninja -v
          
          # Verify the build output
          if [ -f "qemu-system-i386.wasm" ]; then
            echo "QEMU i386 WASM build successful"
            ls -lh qemu-system-i386.wasm
          else
            echo "Error: QEMU WASM build failed"
            exit 1
          fi
          
          if [ -f "qemu-system-x86_64.wasm" ]; then
            echo "QEMU x86_64 WASM build successful"
            ls -lh qemu-system-x86_64.wasm
          fi

      - name: Prepare Distribution Package
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}
          
          # Copy WASM binaries
          cp ${{ env.BUILD_DIR }}/qemu-system-i386.wasm ${{ env.OUTPUT_DIR }}/
          cp ${{ env.BUILD_DIR }}/qemu-system-i386.js ${{ env.OUTPUT_DIR }}/
          
          # Copy x86_64 if built
          if [ -f "${{ env.BUILD_DIR }}/qemu-system-x86_64.wasm" ]; then
            cp ${{ env.BUILD_DIR }}/qemu-system-x86_64.wasm ${{ env.OUTPUT_DIR }}/
            cp ${{ env.BUILD_DIR }}/qemu-system-x86_64.js ${{ env.OUTPUT_DIR }}/
          fi
          
          # Copy any data files
          cp ${{ env.BUILD_DIR }}/*.data ${{ env.OUTPUT_DIR }}/ 2>/dev/null || true
          
          # Create a simple HTML loader for testing
          cat > ${{ env.OUTPUT_DIR }}/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>QEMU WASM Android VM</title>
              <script src="qemu-system-i386.js"></script>
          </head>
          <body>
              <h1>QEMU WASM Android VM</h1>
              <div id="qemu-container"></div>
              <script>
                  Module = {
                      canvas: document.createElement('canvas'),
                      print: console.log,
                      printErr: console.error,
                      onRuntimeInitialized: function() {
                          console.log('QEMU WASM initialized');
                          document.getElementById('qemu-container').appendChild(Module.canvas);
                      }
                  };
                  Module.canvas.id = 'qemu-canvas';
                  Module.canvas.width = 800;
                  Module.canvas.height = 600;
              </script>
          </body>
          </html>
          EOF
          
          # Create a simple test script
          cat > ${{ env.OUTPUT_DIR }}/test.sh << 'EOF'
          #!/bin/bash
          echo "Testing QEMU WASM build..."
          if [ -f "qemu-system-i386.wasm" ]; then
              echo "Found i386 WASM build"
              node qemu-system-i386.js --version || echo "Version check may not work in WASM"
          else
              echo "Error: i386 WASM build not found"
              exit 1
          fi
          EOF
          chmod +x ${{ env.OUTPUT_DIR }}/test.sh

      - name: Run Basic Tests
        run: |
          cd ${{ env.OUTPUT_DIR }}
          ./test.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-android-vm
          path: ${{ env.OUTPUT_DIR }}/*
          if-no-files-found: error
          retention-days: 7

      - name: Archive Build Output
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-android-vm-full
          path: |
            ${{ env.BUILD_DIR }}/**
            ${{ env.OUTPUT_DIR }}/**
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemu-src ${{ env.BUILD_DIR }} ${{ env.OUTPUT_DIR }}
