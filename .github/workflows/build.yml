name: Build QEMU WebAssembly (.wasm only)
on: [push]
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 75
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      EMSDK_VERSION: "3.1.56"
      ARTIFACT_RETENTION_DAYS: 7
      PYTHON_VERSION: "2.7.18"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq build-essential libsdl2-dev libglib2.0-dev libpixman-1-dev ninja-build zlib1g-dev libfdt-dev libcap-dev libattr1-dev \
            wget libssl-dev libbz2-dev libreadline-dev libsqlite3-dev libncurses5-dev libncursesw5-dev xz-utils tk-dev

      - name: Install Python 2.7 from Source
        timeout-minutes: 20
        run: |
          wget -q https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tgz
          tar -xzf Python-${{ env.PYTHON_VERSION }}.tgz
          cd Python-${{ env.PYTHON_VERSION }}
          ./configure --enable-optimizations --quiet
          make -j$(nproc)
          sudo make altinstall
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2.7

      - name: Install Emscripten
        timeout-minutes: 20
        run: |
          git clone --depth 1 https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh

      - name: Fetch QEMU Source
        run: |
          git clone --depth 1 https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          git submodule update --init --depth 1 qemu
          cd qemu
          git checkout 62e5ad0178b6cee9a81cf16e939675855e85a68b

      - name: Patch QEMU Source
        run: |
          cd qemujs-builder/qemu
          
          # Patch configure script to skip compiler bug checks
          sed -i 's/check_cc_bug() {/check_cc_bug() {\n    return 0/' configure
          
          # Patch to force i386 architecture for Emscripten
          sed -i '/if test "$cpu" = ""; then/a\    if test "$emscripten" = "yes"; then\n        cpu="i386"\n    fi' configure
          
          # Patch to handle Emscripten target
          sed -i '/check_define __EMSCRIPTEN__/a\if test "$?" = "0"; then\n    emscripten=yes\nelse\n    emscripten=no\nfi' configure

      - name: Create Compiler Wrappers
        run: |
          cd qemujs-builder/qemu
          
          # emcc wrapper that filters out problematic flags
          cat > emcc-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              # Filter out problematic flags
              case "$arg" in
                  "-m64"|"-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/emcc" "${args[@]}"
          EOF
          chmod +x emcc-wrapper.sh
          echo "EMCC_WRAPPER=$(pwd)/emcc-wrapper.sh" >> $GITHUB_ENV
          
          # Similar wrapper for em++
          cat > emxx-wrapper.sh << 'EOF'
          #!/bin/bash
          args=()
          for arg in "$@"; do
              case "$arg" in
                  "-m64"|"-Werror"|"-fno-gcse"|"-Wold-style-definition"|"-Wtype-limits")
                      continue
                      ;;
                  *)
                      args+=("$arg")
                      ;;
              esac
          done
          exec "${{ env.EMSDK_PATH }}/upstream/emscripten/em++" "${args[@]}"
          EOF
          chmod +x emxx-wrapper.sh
          echo "EMXX_WRAPPER=$(pwd)/emxx-wrapper.sh" >> $GITHUB_ENV

      - name: Configure QEMU
        id: configure
        env:
          CC: "${{ env.EMCC_WRAPPER }}"
          CXX: "${{ env.EMXX_WRAPPER }}"
          LD: "${{ env.EMCC_WRAPPER }}"
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          
          # Convert target name if needed
          TARGET=${{ matrix.target }}
          if [[ "$TARGET" == *"-softmmu" ]]; then
            TARGET="${TARGET}:softmmu"
          fi
          
          emconfigure ./configure \
            --python=/usr/bin/python2.7 \
            --target-list="$TARGET" \
            --disable-xen \
            --disable-user \
            --disable-linux-user \
            --disable-bsd-user \
            --disable-tools \
            --disable-vnc \
            --disable-gtk \
            --cross-prefix="" \
            --cc="$CC" \
            --cxx="$CXX" \
            --extra-cflags="-m32 -DNO_FUTEX=1 -D__EMSCRIPTEN__ -D__linux__ -Wno-ignored-optimization-argument" \
            --extra-ldflags="-s USE_PTHREADS=0 -s WASM=1 -s TOTAL_MEMORY=256MB -s FORCE_FILESYSTEM=1" \
            --disable-pie \
            --disable-werror \
            --disable-stack-protector \
            --disable-system \
            --disable-docs || {
            echo "Configure failed! Dumping config.log for debugging:"
            cat config.log
            exit 1
          }
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV

      - name: Build QEMU WebAssembly
        if: env.CONFIGURE_SUCCEEDED == 'true'
        timeout-minutes: 30
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemujs-builder/qemu
          
          ARCH="${TARGET%-softmmu}"
          ARCH="${ARCH%:softmmu}"
          
          emmake make -j2 V=1 qemu-system-$ARCH \
            CFLAGS="-s USE_SDL=2 -DNO_FUTEX=1 -D__EMSCRIPTEN__" \
            LDFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -s USE_PTHREADS=0 -s ALLOW_MEMORY_GROWTH=1 -s WASM=1"
          
          if [ ! -f "${{ matrix.target }}/qemu-system-$ARCH.wasm" ]; then
            echo "Error: .wasm file not generated!"
            ls -lh "${{ matrix.target }}"
            exit 1
          fi

      - name: Upload Artifact
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: qemujs-builder/qemu/${{ matrix.target }}/qemu-system-*.wasm
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemujs-builder emsdk Python-${{ env.PYTHON_VERSION }} Python-${{ env.PYTHON_VERSION }}.tgz
