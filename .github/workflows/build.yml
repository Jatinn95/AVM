name: Build QEMU WebAssembly (Advanced)
on: 
  push:
    branches:
      - main  # Trigger on pushes to the main branch; adjust as needed

jobs:
  build-from-source:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    continue-on-error: true
    strategy:
      matrix:
        target: ["i386-softmmu", "x86_64-softmmu"]
    env:
      QEMU_VERSION: "9.2.0"
      EMSDK_VERSION: "latest"
      ARTIFACT_RETENTION_DAYS: 7
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 libsdl2-dev libpixman-1-dev ninja-build

      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v3
        with:
          path: emsdk
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v2

      - name: Install Emscripten
        run: |
          if [ ! -d "emsdk" ]; then
            git clone https://github.com/emscripten-core/emsdk.git
          fi
          cd emsdk
          ./emsdk install ${{ env.EMSDK_VERSION }}
          ./emsdk activate ${{ env.EMSDK_VERSION }}
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
        working-directory: .
        timeout-minutes: 15

      - name: Cache QEMU Source
        id: cache-qemu
        uses: actions/cache@v3
        with:
          path: qemu-${{ env.QEMU_VERSION }}
          key: qemu-${{ env.QEMU_VERSION }}-${{ runner.os }}

      - name: Download QEMU Source
        if: steps.cache-qemu.outputs.cache-hit != 'true'
        run: |
          wget --timeout=300 --tries=3 https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz || {
            echo "Error: Failed to download qemu-${{ env.QEMU_VERSION }}.tar.xz."
            exit 1
          }
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
        timeout-minutes: 10

      - name: Install GLib for Emscripten (Workaround)
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          git clone https://gitlab.gnome.org/GNOME/glib.git
          cd glib
          git checkout 2.78.0
          mkdir build && cd build
          emconfigure ../configure --prefix=$(pwd)/install --disable-libmount --disable-selinux --disable-dtrace --disable-systemtap
          emmake make -j2
          emmake make install
          echo "GLIB_PATH=$(pwd)/install" >> $GITHUB_ENV
        working-directory: .
        timeout-minutes: 15

      - name: Patch QEMU Configure Script
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          sed -i '/Unrecognized host OS/ { s/error_exit/#error_exit/; s|$|\necho "Forcing host OS to linux for Emscripten build"\nhost_os=linux|; }' configure
        working-directory: .

      - name: Patch QEMU Meson Build File
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          sed -i "s|error('You either need GCC v7.4 or Clang v10.0 (or XCode Clang v15.0) to compile QEMU')|message('Allowing Emscripten: You either need GCC v7.4 or Clang v10.0 (or XCode Clang v15.0) to compile QEMU')|" meson.build
        working-directory: .

      - name: Create Meson Cross-File
        run: |
          cd qemu-${{ env.QEMU_VERSION }}
          cat > emscripten-cross.txt << EOF
          [binaries]
          c = 'emcc'
          cpp = 'em++'
          ar = 'emar'
          strip = 'emstrip'
          pkgconfig = '${{ env.GLIB_PATH }}/bin/pkg-config'

          [properties]
          needs_exe_wrapper = true
          pkg_config_path = '${{ env.GLIB_PATH }}/lib/pkgconfig'

          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm'
          cpu = 'wasm32'
          endian = 'little'
          EOF
        working-directory: .

      - name: Configure QEMU
        id: configure
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          PKG_CONFIG_PATH="${{ env.GLIB_PATH }}/lib/pkgconfig" \
          emconfigure ./configure --target-list=${{ matrix.target }} --enable-tcg-interpreter --disable-xen --cross-prefix='' --extra-cflags="-I${{ env.GLIB_PATH }}/include" --extra-ldflags="-L${{ env.GLIB_PATH }}/lib"
          echo "CONFIGURE_SUCCEEDED=true" >> $GITHUB_ENV
        working-directory: .
        continue-on-error: true

      - name: Build QEMU with Explicit WebAssembly Output
        if: env.CONFIGURE_SUCCEEDED == 'true'
        run: |
          source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
          cd qemu-${{ env.QEMU_VERSION }}
          emmake make -j2 V=1 \
            CFLAGS="-s USE_SDL=2 -s ASSERTIONS=1 -s SAFE_HEAP=1 -I${{ env.GLIB_PATH }}/include" \
            LDFLAGS="-s USE_SDL=2 -s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME='QEMUModule' -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1 -L${{ env.GLIB_PATH }}/lib -lglib-2.0" \
            EMCC_CFLAGS="-s WASM=1 -s EXPORT_NAME='QEMUModule'"
          echo "Listing generated files in ${{ matrix.target }} directory:"
          ls -la ${{ matrix.target }}/qemu-system-${{ matrix.target }}*
        working-directory: .
        timeout-minutes: 15

      - name: Verify WebAssembly Output
        if: env.CONFIGURE_SUCCEEDED == 'true'
        run: |
          cd qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}
          if [ -f "qemu-system-${{ matrix.target }}.wasm" ]; then
            echo "WebAssembly file found: qemu-system-${{ matrix.target }}.wasm"
            ls -la qemu-system-${{ matrix.target }}.wasm
          else
            echo "Error: .wasm file not generated!"
            ls -la
            exit 1
          fi
        working-directory: .

      - name: Upload Artifacts
        if: env.CONFIGURE_SUCCEEDED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-${{ matrix.target }}
          path: |
            qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-system-${{ matrix.target }}.*
            qemu-${{ env.QEMU_VERSION }}/${{ matrix.target }}/qemu-system-${{ matrix.target }}.wasm
          if-no-files-found: warn
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Cleanup
        run: |
          rm -rf qemu-${{ env.QEMU_VERSION }}
          rm -rf emsdk glib

  prebuilt-qemu-js:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
          source ./emsdk_env.sh
          echo "Emscripten version: $(emcc --version)"
        working-directory: .
        timeout-minutes: 10

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git python3 ninja-build

      - name: Fetch and Build Qemu.js and .wasm with qemujs-builder
        run: |
          echo "Fetching qemujs-builder..."
          git clone https://github.com/atrosinenko/qemujs-builder.git
          cd qemujs-builder
          echo "Fetching essential qemu submodule..."
          git submodule update --init qemu || {
            echo "Submodule update failed, skipping build."
            echo "BUILD_SKIPPED=true" >> $GITHUB_ENV
            exit 0
          }
          if [ "${{ env.BUILD_SKIPPED }}" != "true" ]; then
            cd qemu
            echo "Listing qemu directory contents..."
            ls -la
            if [ -f "../configure-cmd.sh" ]; then
              echo "Running configure-cmd.sh from qemu/ directory..."
              source "${{ env.EMSDK_PATH }}/emsdk_env.sh"
              chmod +x ../configure-cmd.sh
              ../configure-cmd.sh || {
                echo "Configuration failed, skipping build."
                echo "BUILD_SKIPPED=true" >> $GITHUB_ENV
                exit 0
              }
              echo "Building with make (including explicit .wasm output)..."
              cd build
              emmake make -j2 \
                CFLAGS="-s WASM=1 -s MODULARIZE=1 -s EXPORT_NAME='QEMUModule'" \
                LDFLAGS="-s WASM=1 -s EXPORTED_FUNCTIONS='[_main]' -s EXPORTED_RUNTIME_METHODS='[ccall,cwrap]' -s ALLOW_MEMORY_GROWTH=1" \
                EMCC_CFLAGS="-s WASM=1 -s EXPORT_NAME='QEMUModule'" || {
                echo "Make failed, skipping build."
                echo "BUILD_SKIPPED=true" >> $GITHUB_ENV
                exit 0
              }
              echo "Build completed, checking for binaries..."
              ls -la ../qemu-system-*.js ../qemu-system-*.wasm || {
                echo "No .js or .wasm files found, listing parent directory:"
                ls -la ..
                exit 1
              }
              if [ ! -f "../qemu-system-i386.wasm" ]; then
                echo "Error: .wasm file not generated!"
                ls -la ..
                exit 1
              fi
              mkdir -p ../../qemujs-binaries
              cp ../qemu-system-*.js ../../qemujs-binaries/
              cp ../qemu-system-*.wasm ../../qemujs-binaries/
              cp ../*.data ../../qemujs-binaries/ 2>/dev/null || echo "No .data files found."
              cp ../shell.html ../../qemujs-binaries/ 2>/dev/null || echo "No shell.html found."
            else
              echo "No configure-cmd.sh found in qemujs-builder!"
              exit 1
            fi
          fi
        working-directory: .

      - name: Verify WebAssembly Output
        if: env.BUILD_SKIPPED != 'true'
        run: |
          cd qemujs-binaries
          if [ -f "qemu-system-i386.wasm" ]; then
            echo "WebAssembly file found: qemu-system-i386.wasm"
            ls -la qemu-system-i386.wasm
          else
            echo "Error: .wasm file not generated or not copied!"
            ls -la
            exit 1
          fi
        working-directory: .

      - name: Upload Qemu.js and .wasm Artifacts
        if: env.BUILD_SKIPPED != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: qemu-js-wasm-prebuilt
          path: qemujs-binaries/*
          if-no-files-found: warn
          retention-days: 7

      - name: Cleanup
        run: |
          rm -rf qemujs-builder emsdk qemujs-binaries
