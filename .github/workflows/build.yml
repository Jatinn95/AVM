name: Build QEMU WebAssembly
on: [push, workflow_dispatch]
jobs:
  build-qemu-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      QEMU_VERSION: "9.2.0"
      EMSCRIPTEN_VERSION: "latest"
      BUILD_DIR: "qemu-build-wasm"
      OUTPUT_DIR: "qemu-wasm-dist"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            git \
            python3 \
            python3-pip \
            ninja-build \
            libglib2.0-dev \
            libpixman-1-dev \
            libsdl2-dev \
            pkg-config \
            wget \
            xz-utils
          sudo pip3 install meson==1.5.0

      - name: Install Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSCRIPTEN_VERSION }}
          actions-cache-folder: 'emsdk_cache'

      - name: Download QEMU Source
        run: |
          wget -q --show-progress https://download.qemu.org/qemu-${{ env.QEMU_VERSION }}.tar.xz
          tar -xf qemu-${{ env.QEMU_VERSION }}.tar.xz
          mv qemu-${{ env.QEMU_VERSION }} qemu-src
          rm qemu-${{ env.QEMU_VERSION }}.tar.xz

      - name: Configure QEMU for WASM
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          # Create Emscripten cross-compilation file
          cat > emscripten-cross.txt << 'EOF'
          [binaries]
          c = 'emcc'
          cpp = 'em++'
          ar = 'emar'
          strip = 'emstrip'
          pkg-config = 'pkg-config'
          
          [properties]
          needs_exe_wrapper = true
          
          [host_machine]
          system = 'emscripten'
          cpu_family = 'wasm'
          cpu = 'wasm32'
          endian = 'little'
          EOF
          
          # Configure with Meson using proper QEMU syntax
          ../qemu-src/configure \
            --cross-prefix=em \
            --target-list=i386-softmmu \
            --enable-sdl \
            --disable-xen \
            --disable-kvm \
            --disable-vnc \
            --disable-docs \
            --disable-tools \
            --disable-guest-agent \
            --enable-lto \
            --enable-strip \
            --disable-pie \
            --extra-cflags="-s WASM=1 -s USE_SDL=2" \
            --extra-ldflags="-s WASM=1 -s USE_SDL=2"
          
          # Then run meson setup
          meson setup . \
            --cross-file emscripten-cross.txt \
            --buildtype release \
            --optimization 3

      - name: Build QEMU
        run: |
          cd ${{ env.BUILD_DIR }}
          ninja -v
          
          # Verify the build output
          if [ -f "qemu-system-i386" ]; then
            echo "QEMU i386 build successful"
            # Add WASM extension for clarity
            mv qemu-system-i386 qemu-system-i386.wasm
            ls -lh qemu-system-i386.wasm
          else
            echo "Error: QEMU build failed"
            exit 1
          fi

      - name: Prepare Distribution Package
        run: |
          mkdir -p ${{ env.OUTPUT_DIR }}
          
          # Copy all necessary files
          cp ${{ env.BUILD_DIR }}/qemu-system-i386.wasm ${{ env.OUTPUT_DIR }}/
          cp ${{ env.BUILD_DIR }}/qemu-system-i386.js ${{ env.OUTPUT_DIR }}/ 2>/dev/null || true
          cp ${{ env.BUILD_DIR }}/*.data ${{ env.OUTPUT_DIR }}/ 2>/dev/null || true
          
          # Create simple test script
          cat > ${{ env.OUTPUT_DIR }}/test.sh << 'EOF'
          #!/bin/bash
          echo "Testing QEMU WASM build..."
          node qemu-system-i386.wasm --version || echo "Version check completed"
          EOF
          chmod +x ${{ env.OUTPUT_DIR }}/test.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qemu-wasm-build
          path: ${{ env.OUTPUT_DIR }}/*
          if-no-files-found: error
          retention-days: 7

      - name: Cleanup
        if: always()
        run: |
          rm -rf qemu-src ${{ env.BUILD_DIR }} ${{ env.OUTPUT_DIR }}
