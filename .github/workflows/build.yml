Run source "/home/runner/work/AVM/AVM/emsdk/emsdk_env.sh"
Setting up EMSDK environment (suppress these messages with EMSDK_QUIET=1)
Adding directories to PATH:
PATH += /home/runner/work/AVM/AVM/emsdk
PATH += /home/runner/work/AVM/AVM/emsdk/upstream/emscripten

Setting environment variables:
PATH = /home/runner/work/AVM/AVM/emsdk:/home/runner/work/AVM/AVM/emsdk/upstream/emscripten:/snap/bin:/home/runner/.local/bin:/opt/pipx_bin:/home/runner/.cargo/bin:/home/runner/.config/composer/vendor/bin:/usr/local/.ghcup/bin:/home/runner/.dotnet/tools:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
EMSDK = /home/runner/work/AVM/AVM/emsdk
EMSDK_NODE = /home/runner/work/AVM/AVM/emsdk/node/20.18.0_64bit/bin/node
Clearing existing environment variable: EMSDK_PATH
Clearing existing environment variable: EMSDK_VERSION
Checking configure options...
  --target-list=LIST       set target list (default: build all)
                           Available targets: aarch64-linux-user 
  --target-list-exclude=LIST exclude a set of targets from the default target-list
  --cc=CC                  use C compiler CC [cc]
  --host-cc=CC             when cross compiling, use C compiler CC for code run
                           at build time [cc]
  --objcc=OBJCC            use Objective-C compiler OBJCC [clang]
  --cross-cc-ARCH=CC       use compiler when building ARCH guest test cases
  --cross-cc-cflags-ARCH=  use compiler flags when building ARCH guest tests
  --rust-target-triple=TRIPLE  compilation target for Rust code [autodetect]
  --cpu=CPU                Build for host CPU [x86_64]
  --enable-fuzzing         build fuzzing targets
  --enable-strip           Strip targets on install
  auth-pam        PAM access control
  hvf             HVF acceleration support
  kvm             KVM acceleration support
  libudev         Use libudev to enumerate host devices
  nvmm            NVMM acceleration support
  seccomp         seccomp support
  vhost-crypto    vhost-user crypto backend support
  vhost-kernel    vhost kernel backend support
  vhost-net       vhost-net kernel acceleration support
  vhost-user      vhost-user backend support
  vhost-user-blk-server
                  build vhost-user-blk server
  vhost-vdpa      vhost-vdpa kernel backend support
  whpx            WHPX acceleration support
  system          all system emulation targets
  user            supported user emulation targets
  linux-user      all linux usermode emulation targets
  bsd-user        all BSD usermode emulation targets
Configuring QEMU...
Using './build' as the directory for build output
python determined to be '/usr/bin/python3'
python version: Python 3.12.3
mkvenv: Creating non-isolated virtual environment at 'pyvenv'
mkvenv: checking for meson>=1.5.0
mkvenv: checking for pycotap>=1.1.0
mkvenv: installing meson==1.5.0, pycotap==1.3.1
mkvenv: checking for sphinx>=3.4.3
mkvenv: checking for sphinx_rtd_theme>=0.5

'sphinx==5.3.0' not found:
 • Python package 'sphinx' was not found nor installed.
 • mkvenv was configured to operate offline and did not check PyPI.


Sphinx not found/usable, disabling docs.

ERROR: Unrecognized host OS (uname -s reports 'Linux')

Error: Process completed with exit code 1
